// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: trip.proto

package arb_protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTripRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTripRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTripRequestMultiError, or nil if none found.
func (m *CreateTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	// no validation rules for Origin

	// no validation rules for Destination

	// no validation rules for VehicleId

	if all {
		switch v := interface{}(m.GetDepartureTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTripRequestValidationError{
					field:  "DepartureTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTripRequestValidationError{
					field:  "DepartureTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartureTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTripRequestValidationError{
				field:  "DepartureTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetArrivalTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTripRequestValidationError{
					field:  "ArrivalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTripRequestValidationError{
					field:  "ArrivalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArrivalTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTripRequestValidationError{
				field:  "ArrivalTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserReleaseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTripRequestValidationError{
					field:  "UserReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTripRequestValidationError{
					field:  "UserReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserReleaseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTripRequestValidationError{
				field:  "UserReleaseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAgencyReleaseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTripRequestValidationError{
					field:  "AgencyReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTripRequestValidationError{
					field:  "AgencyReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgencyReleaseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTripRequestValidationError{
				field:  "AgencyReleaseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MinPassengers

	// no validation rules for Cost

	// no validation rules for TariffUser

	// no validation rules for TariffAgent

	// no validation rules for Status

	// no validation rules for TripType

	if len(errors) > 0 {
		return CreateTripRequestMultiError(errors)
	}

	return nil
}

// CreateTripRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTripRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTripRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTripRequestMultiError) AllErrors() []error { return m }

// CreateTripRequestValidationError is the validation error returned by
// CreateTripRequest.Validate if the designated constraints aren't met.
type CreateTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTripRequestValidationError) ErrorName() string {
	return "CreateTripRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTripRequestValidationError{}

// Validate checks the field values on CreateTripResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTripResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTripResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTripResponseMultiError, or nil if none found.
func (m *CreateTripResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTripResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateTripResponseMultiError(errors)
	}

	return nil
}

// CreateTripResponseMultiError is an error wrapping multiple validation errors
// returned by CreateTripResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateTripResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTripResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTripResponseMultiError) AllErrors() []error { return m }

// CreateTripResponseValidationError is the validation error returned by
// CreateTripResponse.Validate if the designated constraints aren't met.
type CreateTripResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTripResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTripResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTripResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTripResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTripResponseValidationError) ErrorName() string {
	return "CreateTripResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTripResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTripResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTripResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTripResponseValidationError{}

// Validate checks the field values on GetTripRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTripRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTripRequestMultiError,
// or nil if none found.
func (m *GetTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTripRequestMultiError(errors)
	}

	return nil
}

// GetTripRequestMultiError is an error wrapping multiple validation errors
// returned by GetTripRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTripRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTripRequestMultiError) AllErrors() []error { return m }

// GetTripRequestValidationError is the validation error returned by
// GetTripRequest.Validate if the designated constraints aren't met.
type GetTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTripRequestValidationError) ErrorName() string { return "GetTripRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTripRequestValidationError{}

// Validate checks the field values on GetTripResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTripResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTripResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTripResponseMultiError, or nil if none found.
func (m *GetTripResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTripResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CompanyId

	// no validation rules for Origin

	// no validation rules for Destination

	// no validation rules for VehicleId

	if all {
		switch v := interface{}(m.GetDepartureTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTripResponseValidationError{
					field:  "DepartureTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTripResponseValidationError{
					field:  "DepartureTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartureTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTripResponseValidationError{
				field:  "DepartureTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetArrivalTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTripResponseValidationError{
					field:  "ArrivalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTripResponseValidationError{
					field:  "ArrivalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArrivalTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTripResponseValidationError{
				field:  "ArrivalTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserReleaseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTripResponseValidationError{
					field:  "UserReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTripResponseValidationError{
					field:  "UserReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserReleaseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTripResponseValidationError{
				field:  "UserReleaseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAgencyReleaseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTripResponseValidationError{
					field:  "AgencyReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTripResponseValidationError{
					field:  "AgencyReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgencyReleaseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTripResponseValidationError{
				field:  "AgencyReleaseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MinPassengers

	// no validation rules for Cost

	// no validation rules for TariffUser

	// no validation rules for TariffAgent

	// no validation rules for Status

	// no validation rules for TripType

	// no validation rules for CompanyName

	if len(errors) > 0 {
		return GetTripResponseMultiError(errors)
	}

	return nil
}

// GetTripResponseMultiError is an error wrapping multiple validation errors
// returned by GetTripResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTripResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTripResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTripResponseMultiError) AllErrors() []error { return m }

// GetTripResponseValidationError is the validation error returned by
// GetTripResponse.Validate if the designated constraints aren't met.
type GetTripResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTripResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTripResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTripResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTripResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTripResponseValidationError) ErrorName() string { return "GetTripResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTripResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTripResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTripResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTripResponseValidationError{}

// Validate checks the field values on UpdateTripRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTripRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTripRequestMultiError, or nil if none found.
func (m *UpdateTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CompanyId

	// no validation rules for Origin

	// no validation rules for Destination

	// no validation rules for VehicleId

	if all {
		switch v := interface{}(m.GetDepartureTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTripRequestValidationError{
					field:  "DepartureTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTripRequestValidationError{
					field:  "DepartureTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartureTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTripRequestValidationError{
				field:  "DepartureTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetArrivalTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTripRequestValidationError{
					field:  "ArrivalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTripRequestValidationError{
					field:  "ArrivalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArrivalTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTripRequestValidationError{
				field:  "ArrivalTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserReleaseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTripRequestValidationError{
					field:  "UserReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTripRequestValidationError{
					field:  "UserReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserReleaseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTripRequestValidationError{
				field:  "UserReleaseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAgencyReleaseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTripRequestValidationError{
					field:  "AgencyReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTripRequestValidationError{
					field:  "AgencyReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgencyReleaseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTripRequestValidationError{
				field:  "AgencyReleaseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MinPassengers

	// no validation rules for Cost

	// no validation rules for TariffUser

	// no validation rules for TariffAgent

	// no validation rules for Status

	// no validation rules for TripType

	if len(errors) > 0 {
		return UpdateTripRequestMultiError(errors)
	}

	return nil
}

// UpdateTripRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTripRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTripRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTripRequestMultiError) AllErrors() []error { return m }

// UpdateTripRequestValidationError is the validation error returned by
// UpdateTripRequest.Validate if the designated constraints aren't met.
type UpdateTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTripRequestValidationError) ErrorName() string {
	return "UpdateTripRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTripRequestValidationError{}

// Validate checks the field values on UpdateTripResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTripResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTripResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTripResponseMultiError, or nil if none found.
func (m *UpdateTripResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTripResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateTripResponseMultiError(errors)
	}

	return nil
}

// UpdateTripResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateTripResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateTripResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTripResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTripResponseMultiError) AllErrors() []error { return m }

// UpdateTripResponseValidationError is the validation error returned by
// UpdateTripResponse.Validate if the designated constraints aren't met.
type UpdateTripResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTripResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTripResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTripResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTripResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTripResponseValidationError) ErrorName() string {
	return "UpdateTripResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTripResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTripResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTripResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTripResponseValidationError{}

// Validate checks the field values on DeleteTripRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTripRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTripRequestMultiError, or nil if none found.
func (m *DeleteTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTripRequestMultiError(errors)
	}

	return nil
}

// DeleteTripRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTripRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTripRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTripRequestMultiError) AllErrors() []error { return m }

// DeleteTripRequestValidationError is the validation error returned by
// DeleteTripRequest.Validate if the designated constraints aren't met.
type DeleteTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTripRequestValidationError) ErrorName() string {
	return "DeleteTripRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTripRequestValidationError{}

// Validate checks the field values on DeleteTripResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTripResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTripResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTripResponseMultiError, or nil if none found.
func (m *DeleteTripResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTripResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteTripResponseMultiError(errors)
	}

	return nil
}

// DeleteTripResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteTripResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteTripResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTripResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTripResponseMultiError) AllErrors() []error { return m }

// DeleteTripResponseValidationError is the validation error returned by
// DeleteTripResponse.Validate if the designated constraints aren't met.
type DeleteTripResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTripResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTripResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTripResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTripResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTripResponseValidationError) ErrorName() string {
	return "DeleteTripResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTripResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTripResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTripResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTripResponseValidationError{}

// Validate checks the field values on SearchTripsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchTripsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchTripsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchTripsRequestMultiError, or nil if none found.
func (m *SearchTripsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchTripsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	// no validation rules for Origin

	// no validation rules for Destination

	// no validation rules for VehicleId

	// no validation rules for Status

	// no validation rules for TripType

	if all {
		switch v := interface{}(m.GetMinDeparture()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTripsRequestValidationError{
					field:  "MinDeparture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTripsRequestValidationError{
					field:  "MinDeparture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinDeparture()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTripsRequestValidationError{
				field:  "MinDeparture",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxDeparture()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTripsRequestValidationError{
					field:  "MaxDeparture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTripsRequestValidationError{
					field:  "MaxDeparture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxDeparture()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTripsRequestValidationError{
				field:  "MaxDeparture",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinArrival()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTripsRequestValidationError{
					field:  "MinArrival",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTripsRequestValidationError{
					field:  "MinArrival",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinArrival()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTripsRequestValidationError{
				field:  "MinArrival",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxArrival()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTripsRequestValidationError{
					field:  "MaxArrival",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTripsRequestValidationError{
					field:  "MaxArrival",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxArrival()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTripsRequestValidationError{
				field:  "MaxArrival",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MinCost

	// no validation rules for MaxCost

	// no validation rules for SortField

	// no validation rules for SortDirection

	if len(errors) > 0 {
		return SearchTripsRequestMultiError(errors)
	}

	return nil
}

// SearchTripsRequestMultiError is an error wrapping multiple validation errors
// returned by SearchTripsRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchTripsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchTripsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchTripsRequestMultiError) AllErrors() []error { return m }

// SearchTripsRequestValidationError is the validation error returned by
// SearchTripsRequest.Validate if the designated constraints aren't met.
type SearchTripsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchTripsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchTripsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchTripsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchTripsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchTripsRequestValidationError) ErrorName() string {
	return "SearchTripsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchTripsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchTripsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchTripsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchTripsRequestValidationError{}

// Validate checks the field values on SearchTripsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchTripsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchTripsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchTripsResponseMultiError, or nil if none found.
func (m *SearchTripsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchTripsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTrips() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchTripsResponseValidationError{
						field:  fmt.Sprintf("Trips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchTripsResponseValidationError{
						field:  fmt.Sprintf("Trips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchTripsResponseValidationError{
					field:  fmt.Sprintf("Trips[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchTripsResponseMultiError(errors)
	}

	return nil
}

// SearchTripsResponseMultiError is an error wrapping multiple validation
// errors returned by SearchTripsResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchTripsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchTripsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchTripsResponseMultiError) AllErrors() []error { return m }

// SearchTripsResponseValidationError is the validation error returned by
// SearchTripsResponse.Validate if the designated constraints aren't met.
type SearchTripsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchTripsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchTripsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchTripsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchTripsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchTripsResponseValidationError) ErrorName() string {
	return "SearchTripsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchTripsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchTripsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchTripsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchTripsResponseValidationError{}

// Validate checks the field values on Trip with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Trip) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Trip with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TripMultiError, or nil if none found.
func (m *Trip) ValidateAll() error {
	return m.validate(true)
}

func (m *Trip) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CompanyId

	// no validation rules for Origin

	// no validation rules for Destination

	// no validation rules for VehicleId

	if all {
		switch v := interface{}(m.GetDepartureTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TripValidationError{
					field:  "DepartureTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TripValidationError{
					field:  "DepartureTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartureTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TripValidationError{
				field:  "DepartureTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetArrivalTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TripValidationError{
					field:  "ArrivalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TripValidationError{
					field:  "ArrivalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArrivalTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TripValidationError{
				field:  "ArrivalTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserReleaseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TripValidationError{
					field:  "UserReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TripValidationError{
					field:  "UserReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserReleaseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TripValidationError{
				field:  "UserReleaseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAgencyReleaseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TripValidationError{
					field:  "AgencyReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TripValidationError{
					field:  "AgencyReleaseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgencyReleaseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TripValidationError{
				field:  "AgencyReleaseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MinPassengers

	// no validation rules for Cost

	// no validation rules for TariffUser

	// no validation rules for TariffAgent

	// no validation rules for Status

	// no validation rules for TripType

	if len(errors) > 0 {
		return TripMultiError(errors)
	}

	return nil
}

// TripMultiError is an error wrapping multiple validation errors returned by
// Trip.ValidateAll() if the designated constraints aren't met.
type TripMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TripMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TripMultiError) AllErrors() []error { return m }

// TripValidationError is the validation error returned by Trip.Validate if the
// designated constraints aren't met.
type TripValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TripValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TripValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TripValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TripValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TripValidationError) ErrorName() string { return "TripValidationError" }

// Error satisfies the builtin error interface
func (e TripValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrip.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TripValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TripValidationError{}
