// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: booking.proto

package arb_protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Booking with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Booking) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Booking with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BookingMultiError, or nil if none found.
func (m *Booking) ValidateAll() error {
	return m.validate(true)
}

func (m *Booking) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for HotelId

	// no validation rules for RoomId

	if all {
		switch v := interface{}(m.GetInTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingValidationError{
				field:  "InTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingValidationError{
				field:  "OutTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookingMultiError(errors)
	}

	return nil
}

// BookingMultiError is an error wrapping multiple validation errors returned
// by Booking.ValidateAll() if the designated constraints aren't met.
type BookingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingMultiError) AllErrors() []error { return m }

// BookingValidationError is the validation error returned by Booking.Validate
// if the designated constraints aren't met.
type BookingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingValidationError) ErrorName() string { return "BookingValidationError" }

// Error satisfies the builtin error interface
func (e BookingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBooking.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingValidationError{}

// Validate checks the field values on CreateBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookingRequestMultiError, or nil if none found.
func (m *CreateBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for HotelId

	// no validation rules for RoomId

	if all {
		switch v := interface{}(m.GetInTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBookingRequestValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBookingRequestValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBookingRequestValidationError{
				field:  "InTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBookingRequestValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBookingRequestValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBookingRequestValidationError{
				field:  "OutTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBookingRequestMultiError(errors)
	}

	return nil
}

// CreateBookingRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBookingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookingRequestMultiError) AllErrors() []error { return m }

// CreateBookingRequestValidationError is the validation error returned by
// CreateBookingRequest.Validate if the designated constraints aren't met.
type CreateBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookingRequestValidationError) ErrorName() string {
	return "CreateBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookingRequestValidationError{}

// Validate checks the field values on CreateBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookingResponseMultiError, or nil if none found.
func (m *CreateBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateBookingResponseMultiError(errors)
	}

	return nil
}

// CreateBookingResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBookingResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookingResponseMultiError) AllErrors() []error { return m }

// CreateBookingResponseValidationError is the validation error returned by
// CreateBookingResponse.Validate if the designated constraints aren't met.
type CreateBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookingResponseValidationError) ErrorName() string {
	return "CreateBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookingResponseValidationError{}

// Validate checks the field values on GetBookingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingRequestMultiError, or nil if none found.
func (m *GetBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBookingRequestMultiError(errors)
	}

	return nil
}

// GetBookingRequestMultiError is an error wrapping multiple validation errors
// returned by GetBookingRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingRequestMultiError) AllErrors() []error { return m }

// GetBookingRequestValidationError is the validation error returned by
// GetBookingRequest.Validate if the designated constraints aren't met.
type GetBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingRequestValidationError) ErrorName() string {
	return "GetBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingRequestValidationError{}

// Validate checks the field values on GetBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingResponseMultiError, or nil if none found.
func (m *GetBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookingResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookingResponseMultiError(errors)
	}

	return nil
}

// GetBookingResponseMultiError is an error wrapping multiple validation errors
// returned by GetBookingResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingResponseMultiError) AllErrors() []error { return m }

// GetBookingResponseValidationError is the validation error returned by
// GetBookingResponse.Validate if the designated constraints aren't met.
type GetBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingResponseValidationError) ErrorName() string {
	return "GetBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingResponseValidationError{}

// Validate checks the field values on UpdateBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookingRequestMultiError, or nil if none found.
func (m *UpdateBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for HotelId

	// no validation rules for RoomId

	if all {
		switch v := interface{}(m.GetInTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBookingRequestValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBookingRequestValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBookingRequestValidationError{
				field:  "InTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBookingRequestValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBookingRequestValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBookingRequestValidationError{
				field:  "OutTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBookingRequestMultiError(errors)
	}

	return nil
}

// UpdateBookingRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBookingRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookingRequestMultiError) AllErrors() []error { return m }

// UpdateBookingRequestValidationError is the validation error returned by
// UpdateBookingRequest.Validate if the designated constraints aren't met.
type UpdateBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookingRequestValidationError) ErrorName() string {
	return "UpdateBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookingRequestValidationError{}

// Validate checks the field values on UpdateBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookingResponseMultiError, or nil if none found.
func (m *UpdateBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateBookingResponseMultiError(errors)
	}

	return nil
}

// UpdateBookingResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateBookingResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookingResponseMultiError) AllErrors() []error { return m }

// UpdateBookingResponseValidationError is the validation error returned by
// UpdateBookingResponse.Validate if the designated constraints aren't met.
type UpdateBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookingResponseValidationError) ErrorName() string {
	return "UpdateBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookingResponseValidationError{}

// Validate checks the field values on DeleteBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBookingRequestMultiError, or nil if none found.
func (m *DeleteBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBookingRequestMultiError(errors)
	}

	return nil
}

// DeleteBookingRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBookingRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookingRequestMultiError) AllErrors() []error { return m }

// DeleteBookingRequestValidationError is the validation error returned by
// DeleteBookingRequest.Validate if the designated constraints aren't met.
type DeleteBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookingRequestValidationError) ErrorName() string {
	return "DeleteBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookingRequestValidationError{}

// Validate checks the field values on DeleteBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBookingResponseMultiError, or nil if none found.
func (m *DeleteBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteBookingResponseMultiError(errors)
	}

	return nil
}

// DeleteBookingResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteBookingResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookingResponseMultiError) AllErrors() []error { return m }

// DeleteBookingResponseValidationError is the validation error returned by
// DeleteBookingResponse.Validate if the designated constraints aren't met.
type DeleteBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookingResponseValidationError) ErrorName() string {
	return "DeleteBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookingResponseValidationError{}

// Validate checks the field values on ListBookingsByHotelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookingsByHotelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookingsByHotelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookingsByHotelRequestMultiError, or nil if none found.
func (m *ListBookingsByHotelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookingsByHotelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HotelId

	if len(errors) > 0 {
		return ListBookingsByHotelRequestMultiError(errors)
	}

	return nil
}

// ListBookingsByHotelRequestMultiError is an error wrapping multiple
// validation errors returned by ListBookingsByHotelRequest.ValidateAll() if
// the designated constraints aren't met.
type ListBookingsByHotelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookingsByHotelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookingsByHotelRequestMultiError) AllErrors() []error { return m }

// ListBookingsByHotelRequestValidationError is the validation error returned
// by ListBookingsByHotelRequest.Validate if the designated constraints aren't met.
type ListBookingsByHotelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookingsByHotelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookingsByHotelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookingsByHotelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookingsByHotelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookingsByHotelRequestValidationError) ErrorName() string {
	return "ListBookingsByHotelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookingsByHotelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookingsByHotelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookingsByHotelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookingsByHotelRequestValidationError{}

// Validate checks the field values on ListBookingsByHotelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookingsByHotelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookingsByHotelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookingsByHotelResponseMultiError, or nil if none found.
func (m *ListBookingsByHotelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookingsByHotelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBookingsByHotelResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBookingsByHotelResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBookingsByHotelResponseValidationError{
					field:  fmt.Sprintf("Bookings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBookingsByHotelResponseMultiError(errors)
	}

	return nil
}

// ListBookingsByHotelResponseMultiError is an error wrapping multiple
// validation errors returned by ListBookingsByHotelResponse.ValidateAll() if
// the designated constraints aren't met.
type ListBookingsByHotelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookingsByHotelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookingsByHotelResponseMultiError) AllErrors() []error { return m }

// ListBookingsByHotelResponseValidationError is the validation error returned
// by ListBookingsByHotelResponse.Validate if the designated constraints
// aren't met.
type ListBookingsByHotelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookingsByHotelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookingsByHotelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookingsByHotelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookingsByHotelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookingsByHotelResponseValidationError) ErrorName() string {
	return "ListBookingsByHotelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookingsByHotelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookingsByHotelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookingsByHotelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookingsByHotelResponseValidationError{}

// Validate checks the field values on ListBookingsByUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookingsByUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookingsByUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookingsByUserRequestMultiError, or nil if none found.
func (m *ListBookingsByUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookingsByUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListBookingsByUserRequestMultiError(errors)
	}

	return nil
}

// ListBookingsByUserRequestMultiError is an error wrapping multiple validation
// errors returned by ListBookingsByUserRequest.ValidateAll() if the
// designated constraints aren't met.
type ListBookingsByUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookingsByUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookingsByUserRequestMultiError) AllErrors() []error { return m }

// ListBookingsByUserRequestValidationError is the validation error returned by
// ListBookingsByUserRequest.Validate if the designated constraints aren't met.
type ListBookingsByUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookingsByUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookingsByUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookingsByUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookingsByUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookingsByUserRequestValidationError) ErrorName() string {
	return "ListBookingsByUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookingsByUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookingsByUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookingsByUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookingsByUserRequestValidationError{}

// Validate checks the field values on ListBookingsByUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookingsByUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookingsByUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookingsByUserResponseMultiError, or nil if none found.
func (m *ListBookingsByUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookingsByUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBookingsByUserResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBookingsByUserResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBookingsByUserResponseValidationError{
					field:  fmt.Sprintf("Bookings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBookingsByUserResponseMultiError(errors)
	}

	return nil
}

// ListBookingsByUserResponseMultiError is an error wrapping multiple
// validation errors returned by ListBookingsByUserResponse.ValidateAll() if
// the designated constraints aren't met.
type ListBookingsByUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookingsByUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookingsByUserResponseMultiError) AllErrors() []error { return m }

// ListBookingsByUserResponseValidationError is the validation error returned
// by ListBookingsByUserResponse.Validate if the designated constraints aren't met.
type ListBookingsByUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookingsByUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookingsByUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookingsByUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookingsByUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookingsByUserResponseValidationError) ErrorName() string {
	return "ListBookingsByUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookingsByUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookingsByUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookingsByUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookingsByUserResponseValidationError{}

// Validate checks the field values on ListBookingsByRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookingsByRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookingsByRoomRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookingsByRoomRequestMultiError, or nil if none found.
func (m *ListBookingsByRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookingsByRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return ListBookingsByRoomRequestMultiError(errors)
	}

	return nil
}

// ListBookingsByRoomRequestMultiError is an error wrapping multiple validation
// errors returned by ListBookingsByRoomRequest.ValidateAll() if the
// designated constraints aren't met.
type ListBookingsByRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookingsByRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookingsByRoomRequestMultiError) AllErrors() []error { return m }

// ListBookingsByRoomRequestValidationError is the validation error returned by
// ListBookingsByRoomRequest.Validate if the designated constraints aren't met.
type ListBookingsByRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookingsByRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookingsByRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookingsByRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookingsByRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookingsByRoomRequestValidationError) ErrorName() string {
	return "ListBookingsByRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookingsByRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookingsByRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookingsByRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookingsByRoomRequestValidationError{}

// Validate checks the field values on ListBookingsByRoomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookingsByRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookingsByRoomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookingsByRoomResponseMultiError, or nil if none found.
func (m *ListBookingsByRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookingsByRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBookingsByRoomResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBookingsByRoomResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBookingsByRoomResponseValidationError{
					field:  fmt.Sprintf("Bookings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBookingsByRoomResponseMultiError(errors)
	}

	return nil
}

// ListBookingsByRoomResponseMultiError is an error wrapping multiple
// validation errors returned by ListBookingsByRoomResponse.ValidateAll() if
// the designated constraints aren't met.
type ListBookingsByRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookingsByRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookingsByRoomResponseMultiError) AllErrors() []error { return m }

// ListBookingsByRoomResponseValidationError is the validation error returned
// by ListBookingsByRoomResponse.Validate if the designated constraints aren't met.
type ListBookingsByRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookingsByRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookingsByRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookingsByRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookingsByRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookingsByRoomResponseValidationError) ErrorName() string {
	return "ListBookingsByRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookingsByRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookingsByRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookingsByRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookingsByRoomResponseValidationError{}
