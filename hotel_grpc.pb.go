// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: hotel.proto

package arb_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HotelService_CreateHotel_FullMethodName         = "/hotel.HotelService/CreateHotel"
	HotelService_GetHotel_FullMethodName            = "/hotel.HotelService/GetHotel"
	HotelService_UpdateHotel_FullMethodName         = "/hotel.HotelService/UpdateHotel"
	HotelService_DeleteHotel_FullMethodName         = "/hotel.HotelService/DeleteHotel"
	HotelService_ListHotels_FullMethodName          = "/hotel.HotelService/ListHotels"
	HotelService_BlockHotelByOwner_FullMethodName   = "/hotel.HotelService/BlockHotelByOwner"
	HotelService_BlockHotel_FullMethodName          = "/hotel.HotelService/BlockHotel"
	HotelService_UnBlockHotelByOwner_FullMethodName = "/hotel.HotelService/UnBlockHotelByOwner"
	HotelService_UnBlockHotel_FullMethodName        = "/hotel.HotelService/UnBlockHotel"
)

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	CreateHotel(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*CreateHotelResponse, error)
	GetHotel(ctx context.Context, in *GetHotelRequest, opts ...grpc.CallOption) (*GetHotelResponse, error)
	UpdateHotel(ctx context.Context, in *UpdateHotelRequest, opts ...grpc.CallOption) (*UpdateHotelResponse, error)
	DeleteHotel(ctx context.Context, in *DeleteHotelRequest, opts ...grpc.CallOption) (*DeleteHotelResponse, error)
	ListHotels(ctx context.Context, in *ListHotelRequest, opts ...grpc.CallOption) (*ListHotelResponse, error)
	BlockHotelByOwner(ctx context.Context, in *BlockHotelByOwnerRequest, opts ...grpc.CallOption) (*BlockHotelByOwnerResponse, error)
	BlockHotel(ctx context.Context, in *BlockHotelRequest, opts ...grpc.CallOption) (*BlockHotelResponse, error)
	UnBlockHotelByOwner(ctx context.Context, in *UnBlockHotelByOwnerRequest, opts ...grpc.CallOption) (*UnBlockHotelByOwnerResponse, error)
	UnBlockHotel(ctx context.Context, in *UnBlockHotelRequest, opts ...grpc.CallOption) (*UnBlockHotelResponse, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) CreateHotel(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*CreateHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_CreateHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetHotel(ctx context.Context, in *GetHotelRequest, opts ...grpc.CallOption) (*GetHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_GetHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) UpdateHotel(ctx context.Context, in *UpdateHotelRequest, opts ...grpc.CallOption) (*UpdateHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_UpdateHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) DeleteHotel(ctx context.Context, in *DeleteHotelRequest, opts ...grpc.CallOption) (*DeleteHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_DeleteHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) ListHotels(ctx context.Context, in *ListHotelRequest, opts ...grpc.CallOption) (*ListHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_ListHotels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) BlockHotelByOwner(ctx context.Context, in *BlockHotelByOwnerRequest, opts ...grpc.CallOption) (*BlockHotelByOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockHotelByOwnerResponse)
	err := c.cc.Invoke(ctx, HotelService_BlockHotelByOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) BlockHotel(ctx context.Context, in *BlockHotelRequest, opts ...grpc.CallOption) (*BlockHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_BlockHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) UnBlockHotelByOwner(ctx context.Context, in *UnBlockHotelByOwnerRequest, opts ...grpc.CallOption) (*UnBlockHotelByOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnBlockHotelByOwnerResponse)
	err := c.cc.Invoke(ctx, HotelService_UnBlockHotelByOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) UnBlockHotel(ctx context.Context, in *UnBlockHotelRequest, opts ...grpc.CallOption) (*UnBlockHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnBlockHotelResponse)
	err := c.cc.Invoke(ctx, HotelService_UnBlockHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility
type HotelServiceServer interface {
	CreateHotel(context.Context, *CreateHotelRequest) (*CreateHotelResponse, error)
	GetHotel(context.Context, *GetHotelRequest) (*GetHotelResponse, error)
	UpdateHotel(context.Context, *UpdateHotelRequest) (*UpdateHotelResponse, error)
	DeleteHotel(context.Context, *DeleteHotelRequest) (*DeleteHotelResponse, error)
	ListHotels(context.Context, *ListHotelRequest) (*ListHotelResponse, error)
	BlockHotelByOwner(context.Context, *BlockHotelByOwnerRequest) (*BlockHotelByOwnerResponse, error)
	BlockHotel(context.Context, *BlockHotelRequest) (*BlockHotelResponse, error)
	UnBlockHotelByOwner(context.Context, *UnBlockHotelByOwnerRequest) (*UnBlockHotelByOwnerResponse, error)
	UnBlockHotel(context.Context, *UnBlockHotelRequest) (*UnBlockHotelResponse, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHotelServiceServer struct {
}

func (UnimplementedHotelServiceServer) CreateHotel(context.Context, *CreateHotelRequest) (*CreateHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotel not implemented")
}
func (UnimplementedHotelServiceServer) GetHotel(context.Context, *GetHotelRequest) (*GetHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotel not implemented")
}
func (UnimplementedHotelServiceServer) UpdateHotel(context.Context, *UpdateHotelRequest) (*UpdateHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHotel not implemented")
}
func (UnimplementedHotelServiceServer) DeleteHotel(context.Context, *DeleteHotelRequest) (*DeleteHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotel not implemented")
}
func (UnimplementedHotelServiceServer) ListHotels(context.Context, *ListHotelRequest) (*ListHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHotels not implemented")
}
func (UnimplementedHotelServiceServer) BlockHotelByOwner(context.Context, *BlockHotelByOwnerRequest) (*BlockHotelByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockHotelByOwner not implemented")
}
func (UnimplementedHotelServiceServer) BlockHotel(context.Context, *BlockHotelRequest) (*BlockHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockHotel not implemented")
}
func (UnimplementedHotelServiceServer) UnBlockHotelByOwner(context.Context, *UnBlockHotelByOwnerRequest) (*UnBlockHotelByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBlockHotelByOwner not implemented")
}
func (UnimplementedHotelServiceServer) UnBlockHotel(context.Context, *UnBlockHotelRequest) (*UnBlockHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBlockHotel not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s grpc.ServiceRegistrar, srv HotelServiceServer) {
	s.RegisterService(&HotelService_ServiceDesc, srv)
}

func _HotelService_CreateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CreateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_CreateHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CreateHotel(ctx, req.(*CreateHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_GetHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetHotel(ctx, req.(*GetHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_UpdateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).UpdateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_UpdateHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).UpdateHotel(ctx, req.(*UpdateHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_DeleteHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).DeleteHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_DeleteHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).DeleteHotel(ctx, req.(*DeleteHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_ListHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).ListHotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_ListHotels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).ListHotels(ctx, req.(*ListHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_BlockHotelByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHotelByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).BlockHotelByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_BlockHotelByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).BlockHotelByOwner(ctx, req.(*BlockHotelByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_BlockHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).BlockHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_BlockHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).BlockHotel(ctx, req.(*BlockHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_UnBlockHotelByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBlockHotelByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).UnBlockHotelByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_UnBlockHotelByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).UnBlockHotelByOwner(ctx, req.(*UnBlockHotelByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_UnBlockHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBlockHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).UnBlockHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_UnBlockHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).UnBlockHotel(ctx, req.(*UnBlockHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HotelService_ServiceDesc is the grpc.ServiceDesc for HotelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hotel.HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHotel",
			Handler:    _HotelService_CreateHotel_Handler,
		},
		{
			MethodName: "GetHotel",
			Handler:    _HotelService_GetHotel_Handler,
		},
		{
			MethodName: "UpdateHotel",
			Handler:    _HotelService_UpdateHotel_Handler,
		},
		{
			MethodName: "DeleteHotel",
			Handler:    _HotelService_DeleteHotel_Handler,
		},
		{
			MethodName: "ListHotels",
			Handler:    _HotelService_ListHotels_Handler,
		},
		{
			MethodName: "BlockHotelByOwner",
			Handler:    _HotelService_BlockHotelByOwner_Handler,
		},
		{
			MethodName: "BlockHotel",
			Handler:    _HotelService_BlockHotel_Handler,
		},
		{
			MethodName: "UnBlockHotelByOwner",
			Handler:    _HotelService_UnBlockHotelByOwner_Handler,
		},
		{
			MethodName: "UnBlockHotel",
			Handler:    _HotelService_UnBlockHotel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotel.proto",
}
