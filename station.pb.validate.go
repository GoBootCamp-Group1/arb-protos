// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: station.proto

package arb_protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Station with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Station) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Station with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StationMultiError, or nil if none found.
func (m *Station) ValidateAll() error {
	return m.validate(true)
}

func (m *Station) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for OriginID

	if all {
		switch v := interface{}(m.GetOrigin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StationValidationError{
					field:  "Origin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StationValidationError{
					field:  "Origin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrigin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StationValidationError{
				field:  "Origin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StationMultiError(errors)
	}

	return nil
}

// StationMultiError is an error wrapping multiple validation errors returned
// by Station.ValidateAll() if the designated constraints aren't met.
type StationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StationMultiError) AllErrors() []error { return m }

// StationValidationError is the validation error returned by Station.Validate
// if the designated constraints aren't met.
type StationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StationValidationError) ErrorName() string { return "StationValidationError" }

// Error satisfies the builtin error interface
func (e StationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StationValidationError{}

// Validate checks the field values on StationRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StationRequestMultiError,
// or nil if none found.
func (m *StationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for OriginID

	if len(errors) > 0 {
		return StationRequestMultiError(errors)
	}

	return nil
}

// StationRequestMultiError is an error wrapping multiple validation errors
// returned by StationRequest.ValidateAll() if the designated constraints
// aren't met.
type StationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StationRequestMultiError) AllErrors() []error { return m }

// StationRequestValidationError is the validation error returned by
// StationRequest.Validate if the designated constraints aren't met.
type StationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StationRequestValidationError) ErrorName() string { return "StationRequestValidationError" }

// Error satisfies the builtin error interface
func (e StationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StationRequestValidationError{}

// Validate checks the field values on GetStationByCityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStationByCityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStationByCityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStationByCityRequestMultiError, or nil if none found.
func (m *GetStationByCityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStationByCityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginID

	if len(errors) > 0 {
		return GetStationByCityRequestMultiError(errors)
	}

	return nil
}

// GetStationByCityRequestMultiError is an error wrapping multiple validation
// errors returned by GetStationByCityRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStationByCityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStationByCityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStationByCityRequestMultiError) AllErrors() []error { return m }

// GetStationByCityRequestValidationError is the validation error returned by
// GetStationByCityRequest.Validate if the designated constraints aren't met.
type GetStationByCityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStationByCityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStationByCityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStationByCityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStationByCityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStationByCityRequestValidationError) ErrorName() string {
	return "GetStationByCityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStationByCityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStationByCityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStationByCityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStationByCityRequestValidationError{}

// Validate checks the field values on GetStationByTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStationByTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStationByTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStationByTypeRequestMultiError, or nil if none found.
func (m *GetStationByTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStationByTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return GetStationByTypeRequestMultiError(errors)
	}

	return nil
}

// GetStationByTypeRequestMultiError is an error wrapping multiple validation
// errors returned by GetStationByTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStationByTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStationByTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStationByTypeRequestMultiError) AllErrors() []error { return m }

// GetStationByTypeRequestValidationError is the validation error returned by
// GetStationByTypeRequest.Validate if the designated constraints aren't met.
type GetStationByTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStationByTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStationByTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStationByTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStationByTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStationByTypeRequestValidationError) ErrorName() string {
	return "GetStationByTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStationByTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStationByTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStationByTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStationByTypeRequestValidationError{}

// Validate checks the field values on DeleteStationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStationResponseMultiError, or nil if none found.
func (m *DeleteStationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteStationResponseMultiError(errors)
	}

	return nil
}

// DeleteStationResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteStationResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteStationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStationResponseMultiError) AllErrors() []error { return m }

// DeleteStationResponseValidationError is the validation error returned by
// DeleteStationResponse.Validate if the designated constraints aren't met.
type DeleteStationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStationResponseValidationError) ErrorName() string {
	return "DeleteStationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStationResponseValidationError{}

// Validate checks the field values on GetStationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStationsResponseMultiError, or nil if none found.
func (m *GetStationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStationsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStationsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStationsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStationsResponseMultiError(errors)
	}

	return nil
}

// GetStationsResponseMultiError is an error wrapping multiple validation
// errors returned by GetStationsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStationsResponseMultiError) AllErrors() []error { return m }

// GetStationsResponseValidationError is the validation error returned by
// GetStationsResponse.Validate if the designated constraints aren't met.
type GetStationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStationsResponseValidationError) ErrorName() string {
	return "GetStationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStationsResponseValidationError{}

// Validate checks the field values on GetStationByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStationByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStationByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStationByIDRequestMultiError, or nil if none found.
func (m *GetStationByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStationByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetStationByIDRequestMultiError(errors)
	}

	return nil
}

// GetStationByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetStationByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStationByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStationByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStationByIDRequestMultiError) AllErrors() []error { return m }

// GetStationByIDRequestValidationError is the validation error returned by
// GetStationByIDRequest.Validate if the designated constraints aren't met.
type GetStationByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStationByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStationByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStationByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStationByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStationByIDRequestValidationError) ErrorName() string {
	return "GetStationByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStationByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStationByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStationByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStationByIDRequestValidationError{}

// Validate checks the field values on GetStationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStationResponseMultiError, or nil if none found.
func (m *GetStationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStationResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStationResponseMultiError(errors)
	}

	return nil
}

// GetStationResponseMultiError is an error wrapping multiple validation errors
// returned by GetStationResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStationResponseMultiError) AllErrors() []error { return m }

// GetStationResponseValidationError is the validation error returned by
// GetStationResponse.Validate if the designated constraints aren't met.
type GetStationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStationResponseValidationError) ErrorName() string {
	return "GetStationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStationResponseValidationError{}
