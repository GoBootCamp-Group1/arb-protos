// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: log.proto

package arb_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SearchLogService_SearchLog_FullMethodName = "/log.SearchLogService/SearchLog"
)

// SearchLogServiceClient is the client API for SearchLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchLogServiceClient interface {
	SearchLog(ctx context.Context, in *SearchLogRequest, opts ...grpc.CallOption) (*SearchLogResponse, error)
}

type searchLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchLogServiceClient(cc grpc.ClientConnInterface) SearchLogServiceClient {
	return &searchLogServiceClient{cc}
}

func (c *searchLogServiceClient) SearchLog(ctx context.Context, in *SearchLogRequest, opts ...grpc.CallOption) (*SearchLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchLogResponse)
	err := c.cc.Invoke(ctx, SearchLogService_SearchLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchLogServiceServer is the server API for SearchLogService service.
// All implementations must embed UnimplementedSearchLogServiceServer
// for forward compatibility
type SearchLogServiceServer interface {
	SearchLog(context.Context, *SearchLogRequest) (*SearchLogResponse, error)
	mustEmbedUnimplementedSearchLogServiceServer()
}

// UnimplementedSearchLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchLogServiceServer struct {
}

func (UnimplementedSearchLogServiceServer) SearchLog(context.Context, *SearchLogRequest) (*SearchLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLog not implemented")
}
func (UnimplementedSearchLogServiceServer) mustEmbedUnimplementedSearchLogServiceServer() {}

// UnsafeSearchLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchLogServiceServer will
// result in compilation errors.
type UnsafeSearchLogServiceServer interface {
	mustEmbedUnimplementedSearchLogServiceServer()
}

func RegisterSearchLogServiceServer(s grpc.ServiceRegistrar, srv SearchLogServiceServer) {
	s.RegisterService(&SearchLogService_ServiceDesc, srv)
}

func _SearchLogService_SearchLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchLogServiceServer).SearchLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchLogService_SearchLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchLogServiceServer).SearchLog(ctx, req.(*SearchLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchLogService_ServiceDesc is the grpc.ServiceDesc for SearchLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "log.SearchLogService",
	HandlerType: (*SearchLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchLog",
			Handler:    _SearchLogService_SearchLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}
