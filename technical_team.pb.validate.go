// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: technical_team.proto

package arb_protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTechnicalTeamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTechnicalTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTechnicalTeamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTechnicalTeamRequestMultiError, or nil if none found.
func (m *CreateTechnicalTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTechnicalTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TripId

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateTechnicalTeamRequestMultiError(errors)
	}

	return nil
}

// CreateTechnicalTeamRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTechnicalTeamRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateTechnicalTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTechnicalTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTechnicalTeamRequestMultiError) AllErrors() []error { return m }

// CreateTechnicalTeamRequestValidationError is the validation error returned
// by CreateTechnicalTeamRequest.Validate if the designated constraints aren't met.
type CreateTechnicalTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTechnicalTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTechnicalTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTechnicalTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTechnicalTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTechnicalTeamRequestValidationError) ErrorName() string {
	return "CreateTechnicalTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTechnicalTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTechnicalTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTechnicalTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTechnicalTeamRequestValidationError{}

// Validate checks the field values on CreateTechnicalTeamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTechnicalTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTechnicalTeamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTechnicalTeamResponseMultiError, or nil if none found.
func (m *CreateTechnicalTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTechnicalTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateTechnicalTeamResponseMultiError(errors)
	}

	return nil
}

// CreateTechnicalTeamResponseMultiError is an error wrapping multiple
// validation errors returned by CreateTechnicalTeamResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateTechnicalTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTechnicalTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTechnicalTeamResponseMultiError) AllErrors() []error { return m }

// CreateTechnicalTeamResponseValidationError is the validation error returned
// by CreateTechnicalTeamResponse.Validate if the designated constraints
// aren't met.
type CreateTechnicalTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTechnicalTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTechnicalTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTechnicalTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTechnicalTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTechnicalTeamResponseValidationError) ErrorName() string {
	return "CreateTechnicalTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTechnicalTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTechnicalTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTechnicalTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTechnicalTeamResponseValidationError{}

// Validate checks the field values on GetTechnicalTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTechnicalTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTechnicalTeamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTechnicalTeamRequestMultiError, or nil if none found.
func (m *GetTechnicalTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTechnicalTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTechnicalTeamRequestMultiError(errors)
	}

	return nil
}

// GetTechnicalTeamRequestMultiError is an error wrapping multiple validation
// errors returned by GetTechnicalTeamRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTechnicalTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTechnicalTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTechnicalTeamRequestMultiError) AllErrors() []error { return m }

// GetTechnicalTeamRequestValidationError is the validation error returned by
// GetTechnicalTeamRequest.Validate if the designated constraints aren't met.
type GetTechnicalTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTechnicalTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTechnicalTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTechnicalTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTechnicalTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTechnicalTeamRequestValidationError) ErrorName() string {
	return "GetTechnicalTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTechnicalTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTechnicalTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTechnicalTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTechnicalTeamRequestValidationError{}

// Validate checks the field values on GetTechnicalTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTechnicalTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTechnicalTeamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTechnicalTeamResponseMultiError, or nil if none found.
func (m *GetTechnicalTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTechnicalTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TripId

	// no validation rules for UserId

	// no validation rules for Status

	if len(errors) > 0 {
		return GetTechnicalTeamResponseMultiError(errors)
	}

	return nil
}

// GetTechnicalTeamResponseMultiError is an error wrapping multiple validation
// errors returned by GetTechnicalTeamResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTechnicalTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTechnicalTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTechnicalTeamResponseMultiError) AllErrors() []error { return m }

// GetTechnicalTeamResponseValidationError is the validation error returned by
// GetTechnicalTeamResponse.Validate if the designated constraints aren't met.
type GetTechnicalTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTechnicalTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTechnicalTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTechnicalTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTechnicalTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTechnicalTeamResponseValidationError) ErrorName() string {
	return "GetTechnicalTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTechnicalTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTechnicalTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTechnicalTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTechnicalTeamResponseValidationError{}

// Validate checks the field values on UpdateTechnicalTeamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTechnicalTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTechnicalTeamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTechnicalTeamRequestMultiError, or nil if none found.
func (m *UpdateTechnicalTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTechnicalTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TripId

	// no validation rules for UserId

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateTechnicalTeamRequestMultiError(errors)
	}

	return nil
}

// UpdateTechnicalTeamRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTechnicalTeamRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateTechnicalTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTechnicalTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTechnicalTeamRequestMultiError) AllErrors() []error { return m }

// UpdateTechnicalTeamRequestValidationError is the validation error returned
// by UpdateTechnicalTeamRequest.Validate if the designated constraints aren't met.
type UpdateTechnicalTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTechnicalTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTechnicalTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTechnicalTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTechnicalTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTechnicalTeamRequestValidationError) ErrorName() string {
	return "UpdateTechnicalTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTechnicalTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTechnicalTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTechnicalTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTechnicalTeamRequestValidationError{}

// Validate checks the field values on UpdateTechnicalTeamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTechnicalTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTechnicalTeamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTechnicalTeamResponseMultiError, or nil if none found.
func (m *UpdateTechnicalTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTechnicalTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateTechnicalTeamResponseMultiError(errors)
	}

	return nil
}

// UpdateTechnicalTeamResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateTechnicalTeamResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateTechnicalTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTechnicalTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTechnicalTeamResponseMultiError) AllErrors() []error { return m }

// UpdateTechnicalTeamResponseValidationError is the validation error returned
// by UpdateTechnicalTeamResponse.Validate if the designated constraints
// aren't met.
type UpdateTechnicalTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTechnicalTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTechnicalTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTechnicalTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTechnicalTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTechnicalTeamResponseValidationError) ErrorName() string {
	return "UpdateTechnicalTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTechnicalTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTechnicalTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTechnicalTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTechnicalTeamResponseValidationError{}

// Validate checks the field values on DeleteTechnicalTeamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTechnicalTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTechnicalTeamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTechnicalTeamRequestMultiError, or nil if none found.
func (m *DeleteTechnicalTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTechnicalTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTechnicalTeamRequestMultiError(errors)
	}

	return nil
}

// DeleteTechnicalTeamRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteTechnicalTeamRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteTechnicalTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTechnicalTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTechnicalTeamRequestMultiError) AllErrors() []error { return m }

// DeleteTechnicalTeamRequestValidationError is the validation error returned
// by DeleteTechnicalTeamRequest.Validate if the designated constraints aren't met.
type DeleteTechnicalTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTechnicalTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTechnicalTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTechnicalTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTechnicalTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTechnicalTeamRequestValidationError) ErrorName() string {
	return "DeleteTechnicalTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTechnicalTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTechnicalTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTechnicalTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTechnicalTeamRequestValidationError{}

// Validate checks the field values on DeleteTechnicalTeamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTechnicalTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTechnicalTeamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTechnicalTeamResponseMultiError, or nil if none found.
func (m *DeleteTechnicalTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTechnicalTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteTechnicalTeamResponseMultiError(errors)
	}

	return nil
}

// DeleteTechnicalTeamResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteTechnicalTeamResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteTechnicalTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTechnicalTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTechnicalTeamResponseMultiError) AllErrors() []error { return m }

// DeleteTechnicalTeamResponseValidationError is the validation error returned
// by DeleteTechnicalTeamResponse.Validate if the designated constraints
// aren't met.
type DeleteTechnicalTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTechnicalTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTechnicalTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTechnicalTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTechnicalTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTechnicalTeamResponseValidationError) ErrorName() string {
	return "DeleteTechnicalTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTechnicalTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTechnicalTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTechnicalTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTechnicalTeamResponseValidationError{}
