// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: perm.proto

package arb_protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePermissionRequestMultiError, or nil if none found.
func (m *CreatePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := CreatePermissionRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Jwt

	if len(errors) > 0 {
		return CreatePermissionRequestMultiError(errors)
	}

	return nil
}

// CreatePermissionRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionRequestMultiError) AllErrors() []error { return m }

// CreatePermissionRequestValidationError is the validation error returned by
// CreatePermissionRequest.Validate if the designated constraints aren't met.
type CreatePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionRequestValidationError) ErrorName() string {
	return "CreatePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionRequestValidationError{}

// Validate checks the field values on CreatePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePermissionResponseMultiError, or nil if none found.
func (m *CreatePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Id

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return CreatePermissionResponseMultiError(errors)
	}

	return nil
}

// CreatePermissionResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionResponseMultiError) AllErrors() []error { return m }

// CreatePermissionResponseValidationError is the validation error returned by
// CreatePermissionResponse.Validate if the designated constraints aren't met.
type CreatePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionResponseValidationError) ErrorName() string {
	return "CreatePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionResponseValidationError{}

// Validate checks the field values on UpdatePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePermissionRequestMultiError, or nil if none found.
func (m *UpdatePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := UpdatePermissionRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Jwt

	if len(errors) > 0 {
		return UpdatePermissionRequestMultiError(errors)
	}

	return nil
}

// UpdatePermissionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionRequestMultiError) AllErrors() []error { return m }

// UpdatePermissionRequestValidationError is the validation error returned by
// UpdatePermissionRequest.Validate if the designated constraints aren't met.
type UpdatePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionRequestValidationError) ErrorName() string {
	return "UpdatePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionRequestValidationError{}

// Validate checks the field values on UpdatePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePermissionResponseMultiError, or nil if none found.
func (m *UpdatePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return UpdatePermissionResponseMultiError(errors)
	}

	return nil
}

// UpdatePermissionResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionResponseMultiError) AllErrors() []error { return m }

// UpdatePermissionResponseValidationError is the validation error returned by
// UpdatePermissionResponse.Validate if the designated constraints aren't met.
type UpdatePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionResponseValidationError) ErrorName() string {
	return "UpdatePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionResponseValidationError{}

// Validate checks the field values on GetPermissionByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionByIdRequestMultiError, or nil if none found.
func (m *GetPermissionByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Jwt

	if len(errors) > 0 {
		return GetPermissionByIdRequestMultiError(errors)
	}

	return nil
}

// GetPermissionByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetPermissionByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPermissionByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionByIdRequestMultiError) AllErrors() []error { return m }

// GetPermissionByIdRequestValidationError is the validation error returned by
// GetPermissionByIdRequest.Validate if the designated constraints aren't met.
type GetPermissionByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionByIdRequestValidationError) ErrorName() string {
	return "GetPermissionByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionByIdRequestValidationError{}

// Validate checks the field values on GetPermissionByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionByIdResponseMultiError, or nil if none found.
func (m *GetPermissionByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetPerm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPermissionByIdResponseValidationError{
					field:  "Perm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPermissionByIdResponseValidationError{
					field:  "Perm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPerm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPermissionByIdResponseValidationError{
				field:  "Perm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return GetPermissionByIdResponseMultiError(errors)
	}

	return nil
}

// GetPermissionByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetPermissionByIdResponse.ValidateAll() if the
// designated constraints aren't met.
type GetPermissionByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionByIdResponseMultiError) AllErrors() []error { return m }

// GetPermissionByIdResponseValidationError is the validation error returned by
// GetPermissionByIdResponse.Validate if the designated constraints aren't met.
type GetPermissionByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionByIdResponseValidationError) ErrorName() string {
	return "GetPermissionByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionByIdResponseValidationError{}

// Validate checks the field values on GetPermissionByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionByNameRequestMultiError, or nil if none found.
func (m *GetPermissionByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := GetPermissionByNameRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Jwt

	if len(errors) > 0 {
		return GetPermissionByNameRequestMultiError(errors)
	}

	return nil
}

// GetPermissionByNameRequestMultiError is an error wrapping multiple
// validation errors returned by GetPermissionByNameRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPermissionByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionByNameRequestMultiError) AllErrors() []error { return m }

// GetPermissionByNameRequestValidationError is the validation error returned
// by GetPermissionByNameRequest.Validate if the designated constraints aren't met.
type GetPermissionByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionByNameRequestValidationError) ErrorName() string {
	return "GetPermissionByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionByNameRequestValidationError{}

// Validate checks the field values on GetPermissionByNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionByNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionByNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionByNameResponseMultiError, or nil if none found.
func (m *GetPermissionByNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionByNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetPerm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPermissionByNameResponseValidationError{
					field:  "Perm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPermissionByNameResponseValidationError{
					field:  "Perm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPerm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPermissionByNameResponseValidationError{
				field:  "Perm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return GetPermissionByNameResponseMultiError(errors)
	}

	return nil
}

// GetPermissionByNameResponseMultiError is an error wrapping multiple
// validation errors returned by GetPermissionByNameResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPermissionByNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionByNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionByNameResponseMultiError) AllErrors() []error { return m }

// GetPermissionByNameResponseValidationError is the validation error returned
// by GetPermissionByNameResponse.Validate if the designated constraints
// aren't met.
type GetPermissionByNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionByNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionByNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionByNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionByNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionByNameResponseValidationError) ErrorName() string {
	return "GetPermissionByNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionByNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionByNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionByNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionByNameResponseValidationError{}

// Validate checks the field values on DeletePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePermissionRequestMultiError, or nil if none found.
func (m *DeletePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Jwt

	if len(errors) > 0 {
		return DeletePermissionRequestMultiError(errors)
	}

	return nil
}

// DeletePermissionRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionRequestMultiError) AllErrors() []error { return m }

// DeletePermissionRequestValidationError is the validation error returned by
// DeletePermissionRequest.Validate if the designated constraints aren't met.
type DeletePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionRequestValidationError) ErrorName() string {
	return "DeletePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionRequestValidationError{}

// Validate checks the field values on DeletePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePermissionResponseMultiError, or nil if none found.
func (m *DeletePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return DeletePermissionResponseMultiError(errors)
	}

	return nil
}

// DeletePermissionResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionResponseMultiError) AllErrors() []error { return m }

// DeletePermissionResponseValidationError is the validation error returned by
// DeletePermissionResponse.Validate if the designated constraints aren't met.
type DeletePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionResponseValidationError) ErrorName() string {
	return "DeletePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionResponseValidationError{}

// Validate checks the field values on GetAllPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllPermissionsRequestMultiError, or nil if none found.
func (m *GetAllPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Jwt

	if len(errors) > 0 {
		return GetAllPermissionsRequestMultiError(errors)
	}

	return nil
}

// GetAllPermissionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllPermissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllPermissionsRequestMultiError) AllErrors() []error { return m }

// GetAllPermissionsRequestValidationError is the validation error returned by
// GetAllPermissionsRequest.Validate if the designated constraints aren't met.
type GetAllPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllPermissionsRequestValidationError) ErrorName() string {
	return "GetAllPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllPermissionsRequestValidationError{}

// Validate checks the field values on GetAllPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllPermissionsResponseMultiError, or nil if none found.
func (m *GetAllPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetPerms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllPermissionsResponseValidationError{
						field:  fmt.Sprintf("Perms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllPermissionsResponseValidationError{
						field:  fmt.Sprintf("Perms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllPermissionsResponseValidationError{
					field:  fmt.Sprintf("Perms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return GetAllPermissionsResponseMultiError(errors)
	}

	return nil
}

// GetAllPermissionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllPermissionsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAllPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllPermissionsResponseMultiError) AllErrors() []error { return m }

// GetAllPermissionsResponseValidationError is the validation error returned by
// GetAllPermissionsResponse.Validate if the designated constraints aren't met.
type GetAllPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllPermissionsResponseValidationError) ErrorName() string {
	return "GetAllPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllPermissionsResponseValidationError{}
