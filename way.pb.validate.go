// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: way.proto

package arb_protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ValidateMapAndReturnArivalTimeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ValidateMapAndReturnArivalTimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateMapAndReturnArivalTimeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ValidateMapAndReturnArivalTimeRequestMultiError, or nil if none found.
func (m *ValidateMapAndReturnArivalTimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateMapAndReturnArivalTimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginCityId

	// no validation rules for DestinationCityId

	// no validation rules for OriginStationId

	// no validation rules for DestinationStationId

	// no validation rules for Type

	// no validation rules for Speed

	if len(errors) > 0 {
		return ValidateMapAndReturnArivalTimeRequestMultiError(errors)
	}

	return nil
}

// ValidateMapAndReturnArivalTimeRequestMultiError is an error wrapping
// multiple validation errors returned by
// ValidateMapAndReturnArivalTimeRequest.ValidateAll() if the designated
// constraints aren't met.
type ValidateMapAndReturnArivalTimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateMapAndReturnArivalTimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateMapAndReturnArivalTimeRequestMultiError) AllErrors() []error { return m }

// ValidateMapAndReturnArivalTimeRequestValidationError is the validation error
// returned by ValidateMapAndReturnArivalTimeRequest.Validate if the
// designated constraints aren't met.
type ValidateMapAndReturnArivalTimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateMapAndReturnArivalTimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateMapAndReturnArivalTimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateMapAndReturnArivalTimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateMapAndReturnArivalTimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateMapAndReturnArivalTimeRequestValidationError) ErrorName() string {
	return "ValidateMapAndReturnArivalTimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateMapAndReturnArivalTimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateMapAndReturnArivalTimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateMapAndReturnArivalTimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateMapAndReturnArivalTimeRequestValidationError{}

// Validate checks the field values on ValidateMapAndReturnArivalTimeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ValidateMapAndReturnArivalTimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ValidateMapAndReturnArivalTimeResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ValidateMapAndReturnArivalTimeResponseMultiError, or nil if none found.
func (m *ValidateMapAndReturnArivalTimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateMapAndReturnArivalTimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArrivalTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateMapAndReturnArivalTimeResponseValidationError{
					field:  "ArrivalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateMapAndReturnArivalTimeResponseValidationError{
					field:  "ArrivalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArrivalTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateMapAndReturnArivalTimeResponseValidationError{
				field:  "ArrivalTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidateMapAndReturnArivalTimeResponseMultiError(errors)
	}

	return nil
}

// ValidateMapAndReturnArivalTimeResponseMultiError is an error wrapping
// multiple validation errors returned by
// ValidateMapAndReturnArivalTimeResponse.ValidateAll() if the designated
// constraints aren't met.
type ValidateMapAndReturnArivalTimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateMapAndReturnArivalTimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateMapAndReturnArivalTimeResponseMultiError) AllErrors() []error { return m }

// ValidateMapAndReturnArivalTimeResponseValidationError is the validation
// error returned by ValidateMapAndReturnArivalTimeResponse.Validate if the
// designated constraints aren't met.
type ValidateMapAndReturnArivalTimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateMapAndReturnArivalTimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateMapAndReturnArivalTimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateMapAndReturnArivalTimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateMapAndReturnArivalTimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateMapAndReturnArivalTimeResponseValidationError) ErrorName() string {
	return "ValidateMapAndReturnArivalTimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateMapAndReturnArivalTimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateMapAndReturnArivalTimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateMapAndReturnArivalTimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateMapAndReturnArivalTimeResponseValidationError{}

// Validate checks the field values on Way with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Way) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Way with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WayMultiError, or nil if none found.
func (m *Way) ValidateAll() error {
	return m.validate(true)
}

func (m *Way) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for StationID

	if all {
		switch v := interface{}(m.GetStation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WayValidationError{
					field:  "Station",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WayValidationError{
					field:  "Station",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WayValidationError{
				field:  "Station",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DestinationID

	if all {
		switch v := interface{}(m.GetDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WayValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WayValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WayValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Distance

	if len(errors) > 0 {
		return WayMultiError(errors)
	}

	return nil
}

// WayMultiError is an error wrapping multiple validation errors returned by
// Way.ValidateAll() if the designated constraints aren't met.
type WayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WayMultiError) AllErrors() []error { return m }

// WayValidationError is the validation error returned by Way.Validate if the
// designated constraints aren't met.
type WayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WayValidationError) ErrorName() string { return "WayValidationError" }

// Error satisfies the builtin error interface
func (e WayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WayValidationError{}

// Validate checks the field values on WayRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WayRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WayRequestMultiError, or
// nil if none found.
func (m *WayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StationID

	// no validation rules for DestinationID

	if len(errors) > 0 {
		return WayRequestMultiError(errors)
	}

	return nil
}

// WayRequestMultiError is an error wrapping multiple validation errors
// returned by WayRequest.ValidateAll() if the designated constraints aren't met.
type WayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WayRequestMultiError) AllErrors() []error { return m }

// WayRequestValidationError is the validation error returned by
// WayRequest.Validate if the designated constraints aren't met.
type WayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WayRequestValidationError) ErrorName() string { return "WayRequestValidationError" }

// Error satisfies the builtin error interface
func (e WayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WayRequestValidationError{}

// Validate checks the field values on WayResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WayResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WayResponseMultiError, or
// nil if none found.
func (m *WayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WayResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WayResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WayResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WayResponseMultiError(errors)
	}

	return nil
}

// WayResponseMultiError is an error wrapping multiple validation errors
// returned by WayResponse.ValidateAll() if the designated constraints aren't met.
type WayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WayResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WayResponseMultiError) AllErrors() []error { return m }

// WayResponseValidationError is the validation error returned by
// WayResponse.Validate if the designated constraints aren't met.
type WayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WayResponseValidationError) ErrorName() string { return "WayResponseValidationError" }

// Error satisfies the builtin error interface
func (e WayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WayResponseValidationError{}

// Validate checks the field values on GetWaysResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWaysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWaysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWaysResponseMultiError, or nil if none found.
func (m *GetWaysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWaysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWaysResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWaysResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWaysResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWaysResponseMultiError(errors)
	}

	return nil
}

// GetWaysResponseMultiError is an error wrapping multiple validation errors
// returned by GetWaysResponse.ValidateAll() if the designated constraints
// aren't met.
type GetWaysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWaysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWaysResponseMultiError) AllErrors() []error { return m }

// GetWaysResponseValidationError is the validation error returned by
// GetWaysResponse.Validate if the designated constraints aren't met.
type GetWaysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWaysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWaysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWaysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWaysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWaysResponseValidationError) ErrorName() string { return "GetWaysResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetWaysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWaysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWaysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWaysResponseValidationError{}

// Validate checks the field values on GetWayByIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWayByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWayByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWayByIDRequestMultiError, or nil if none found.
func (m *GetWayByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWayByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetWayByIDRequestMultiError(errors)
	}

	return nil
}

// GetWayByIDRequestMultiError is an error wrapping multiple validation errors
// returned by GetWayByIDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWayByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWayByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWayByIDRequestMultiError) AllErrors() []error { return m }

// GetWayByIDRequestValidationError is the validation error returned by
// GetWayByIDRequest.Validate if the designated constraints aren't met.
type GetWayByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWayByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWayByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWayByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWayByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWayByIDRequestValidationError) ErrorName() string {
	return "GetWayByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWayByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWayByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWayByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWayByIDRequestValidationError{}

// Validate checks the field values on GetWayByStationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWayByStationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWayByStationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWayByStationRequestMultiError, or nil if none found.
func (m *GetWayByStationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWayByStationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StationID

	if len(errors) > 0 {
		return GetWayByStationRequestMultiError(errors)
	}

	return nil
}

// GetWayByStationRequestMultiError is an error wrapping multiple validation
// errors returned by GetWayByStationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWayByStationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWayByStationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWayByStationRequestMultiError) AllErrors() []error { return m }

// GetWayByStationRequestValidationError is the validation error returned by
// GetWayByStationRequest.Validate if the designated constraints aren't met.
type GetWayByStationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWayByStationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWayByStationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWayByStationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWayByStationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWayByStationRequestValidationError) ErrorName() string {
	return "GetWayByStationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWayByStationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWayByStationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWayByStationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWayByStationRequestValidationError{}

// Validate checks the field values on GetWayByDestinationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWayByDestinationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWayByDestinationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWayByDestinationRequestMultiError, or nil if none found.
func (m *GetWayByDestinationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWayByDestinationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DestinationID

	if len(errors) > 0 {
		return GetWayByDestinationRequestMultiError(errors)
	}

	return nil
}

// GetWayByDestinationRequestMultiError is an error wrapping multiple
// validation errors returned by GetWayByDestinationRequest.ValidateAll() if
// the designated constraints aren't met.
type GetWayByDestinationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWayByDestinationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWayByDestinationRequestMultiError) AllErrors() []error { return m }

// GetWayByDestinationRequestValidationError is the validation error returned
// by GetWayByDestinationRequest.Validate if the designated constraints aren't met.
type GetWayByDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWayByDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWayByDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWayByDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWayByDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWayByDestinationRequestValidationError) ErrorName() string {
	return "GetWayByDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWayByDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWayByDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWayByDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWayByDestinationRequestValidationError{}

// Validate checks the field values on DeleteWayResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteWayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWayResponseMultiError, or nil if none found.
func (m *DeleteWayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteWayResponseMultiError(errors)
	}

	return nil
}

// DeleteWayResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteWayResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteWayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWayResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWayResponseMultiError) AllErrors() []error { return m }

// DeleteWayResponseValidationError is the validation error returned by
// DeleteWayResponse.Validate if the designated constraints aren't met.
type DeleteWayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWayResponseValidationError) ErrorName() string {
	return "DeleteWayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWayResponseValidationError{}
