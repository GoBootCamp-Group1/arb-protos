// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: hotel.proto

package arb_protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Hotel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Hotel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Hotel with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HotelMultiError, or nil if none found.
func (m *Hotel) ValidateAll() error {
	return m.validate(true)
}

func (m *Hotel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OwnerId

	// no validation rules for Name

	// no validation rules for Blocked

	// no validation rules for WalletBalance

	if len(errors) > 0 {
		return HotelMultiError(errors)
	}

	return nil
}

// HotelMultiError is an error wrapping multiple validation errors returned by
// Hotel.ValidateAll() if the designated constraints aren't met.
type HotelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HotelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HotelMultiError) AllErrors() []error { return m }

// HotelValidationError is the validation error returned by Hotel.Validate if
// the designated constraints aren't met.
type HotelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HotelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HotelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HotelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HotelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HotelValidationError) ErrorName() string { return "HotelValidationError" }

// Error satisfies the builtin error interface
func (e HotelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHotel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HotelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HotelValidationError{}

// Validate checks the field values on CreateHotelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateHotelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHotelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHotelRequestMultiError, or nil if none found.
func (m *CreateHotelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHotelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	// no validation rules for Name

	// no validation rules for WalletBalance

	if len(errors) > 0 {
		return CreateHotelRequestMultiError(errors)
	}

	return nil
}

// CreateHotelRequestMultiError is an error wrapping multiple validation errors
// returned by CreateHotelRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateHotelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHotelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHotelRequestMultiError) AllErrors() []error { return m }

// CreateHotelRequestValidationError is the validation error returned by
// CreateHotelRequest.Validate if the designated constraints aren't met.
type CreateHotelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHotelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHotelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHotelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHotelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHotelRequestValidationError) ErrorName() string {
	return "CreateHotelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHotelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHotelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHotelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHotelRequestValidationError{}

// Validate checks the field values on CreateHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateHotelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHotelResponseMultiError, or nil if none found.
func (m *CreateHotelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHotelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateHotelResponseMultiError(errors)
	}

	return nil
}

// CreateHotelResponseMultiError is an error wrapping multiple validation
// errors returned by CreateHotelResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateHotelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHotelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHotelResponseMultiError) AllErrors() []error { return m }

// CreateHotelResponseValidationError is the validation error returned by
// CreateHotelResponse.Validate if the designated constraints aren't met.
type CreateHotelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHotelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHotelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHotelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHotelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHotelResponseValidationError) ErrorName() string {
	return "CreateHotelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHotelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHotelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHotelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHotelResponseValidationError{}

// Validate checks the field values on GetHotelRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHotelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHotelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHotelRequestMultiError, or nil if none found.
func (m *GetHotelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHotelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetHotelRequestMultiError(errors)
	}

	return nil
}

// GetHotelRequestMultiError is an error wrapping multiple validation errors
// returned by GetHotelRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHotelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHotelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHotelRequestMultiError) AllErrors() []error { return m }

// GetHotelRequestValidationError is the validation error returned by
// GetHotelRequest.Validate if the designated constraints aren't met.
type GetHotelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHotelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHotelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHotelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHotelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHotelRequestValidationError) ErrorName() string { return "GetHotelRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHotelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHotelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHotelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHotelRequestValidationError{}

// Validate checks the field values on GetHotelResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHotelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHotelResponseMultiError, or nil if none found.
func (m *GetHotelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHotelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHotel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHotelResponseValidationError{
					field:  "Hotel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHotelResponseValidationError{
					field:  "Hotel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHotel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHotelResponseValidationError{
				field:  "Hotel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHotelResponseMultiError(errors)
	}

	return nil
}

// GetHotelResponseMultiError is an error wrapping multiple validation errors
// returned by GetHotelResponse.ValidateAll() if the designated constraints
// aren't met.
type GetHotelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHotelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHotelResponseMultiError) AllErrors() []error { return m }

// GetHotelResponseValidationError is the validation error returned by
// GetHotelResponse.Validate if the designated constraints aren't met.
type GetHotelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHotelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHotelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHotelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHotelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHotelResponseValidationError) ErrorName() string { return "GetHotelResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetHotelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHotelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHotelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHotelResponseValidationError{}

// Validate checks the field values on UpdateHotelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateHotelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateHotelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateHotelRequestMultiError, or nil if none found.
func (m *UpdateHotelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateHotelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OwnerId

	// no validation rules for Name

	// no validation rules for Blocked

	// no validation rules for WalletBalance

	if len(errors) > 0 {
		return UpdateHotelRequestMultiError(errors)
	}

	return nil
}

// UpdateHotelRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateHotelRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateHotelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateHotelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateHotelRequestMultiError) AllErrors() []error { return m }

// UpdateHotelRequestValidationError is the validation error returned by
// UpdateHotelRequest.Validate if the designated constraints aren't met.
type UpdateHotelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHotelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHotelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHotelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHotelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHotelRequestValidationError) ErrorName() string {
	return "UpdateHotelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHotelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHotelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHotelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHotelRequestValidationError{}

// Validate checks the field values on UpdateHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateHotelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateHotelResponseMultiError, or nil if none found.
func (m *UpdateHotelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateHotelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateHotelResponseMultiError(errors)
	}

	return nil
}

// UpdateHotelResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateHotelResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateHotelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateHotelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateHotelResponseMultiError) AllErrors() []error { return m }

// UpdateHotelResponseValidationError is the validation error returned by
// UpdateHotelResponse.Validate if the designated constraints aren't met.
type UpdateHotelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHotelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHotelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHotelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHotelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHotelResponseValidationError) ErrorName() string {
	return "UpdateHotelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHotelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHotelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHotelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHotelResponseValidationError{}

// Validate checks the field values on DeleteHotelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHotelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHotelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHotelRequestMultiError, or nil if none found.
func (m *DeleteHotelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHotelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteHotelRequestMultiError(errors)
	}

	return nil
}

// DeleteHotelRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteHotelRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteHotelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHotelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHotelRequestMultiError) AllErrors() []error { return m }

// DeleteHotelRequestValidationError is the validation error returned by
// DeleteHotelRequest.Validate if the designated constraints aren't met.
type DeleteHotelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHotelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHotelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHotelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHotelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHotelRequestValidationError) ErrorName() string {
	return "DeleteHotelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHotelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHotelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHotelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHotelRequestValidationError{}

// Validate checks the field values on DeleteHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHotelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHotelResponseMultiError, or nil if none found.
func (m *DeleteHotelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHotelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteHotelResponseMultiError(errors)
	}

	return nil
}

// DeleteHotelResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteHotelResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteHotelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHotelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHotelResponseMultiError) AllErrors() []error { return m }

// DeleteHotelResponseValidationError is the validation error returned by
// DeleteHotelResponse.Validate if the designated constraints aren't met.
type DeleteHotelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHotelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHotelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHotelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHotelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHotelResponseValidationError) ErrorName() string {
	return "DeleteHotelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHotelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHotelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHotelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHotelResponseValidationError{}

// Validate checks the field values on ListHotelRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHotelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHotelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHotelRequestMultiError, or nil if none found.
func (m *ListHotelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHotelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return ListHotelRequestMultiError(errors)
	}

	return nil
}

// ListHotelRequestMultiError is an error wrapping multiple validation errors
// returned by ListHotelRequest.ValidateAll() if the designated constraints
// aren't met.
type ListHotelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHotelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHotelRequestMultiError) AllErrors() []error { return m }

// ListHotelRequestValidationError is the validation error returned by
// ListHotelRequest.Validate if the designated constraints aren't met.
type ListHotelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHotelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHotelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHotelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHotelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHotelRequestValidationError) ErrorName() string { return "ListHotelRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListHotelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHotelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHotelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHotelRequestValidationError{}

// Validate checks the field values on ListHotelResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHotelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHotelResponseMultiError, or nil if none found.
func (m *ListHotelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHotelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHotels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHotelResponseValidationError{
						field:  fmt.Sprintf("Hotels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHotelResponseValidationError{
						field:  fmt.Sprintf("Hotels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHotelResponseValidationError{
					field:  fmt.Sprintf("Hotels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListHotelResponseMultiError(errors)
	}

	return nil
}

// ListHotelResponseMultiError is an error wrapping multiple validation errors
// returned by ListHotelResponse.ValidateAll() if the designated constraints
// aren't met.
type ListHotelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHotelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHotelResponseMultiError) AllErrors() []error { return m }

// ListHotelResponseValidationError is the validation error returned by
// ListHotelResponse.Validate if the designated constraints aren't met.
type ListHotelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHotelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHotelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHotelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHotelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHotelResponseValidationError) ErrorName() string {
	return "ListHotelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHotelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHotelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHotelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHotelResponseValidationError{}

// Validate checks the field values on BlockHotelByOwnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockHotelByOwnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockHotelByOwnerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockHotelByOwnerRequestMultiError, or nil if none found.
func (m *BlockHotelByOwnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockHotelByOwnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return BlockHotelByOwnerRequestMultiError(errors)
	}

	return nil
}

// BlockHotelByOwnerRequestMultiError is an error wrapping multiple validation
// errors returned by BlockHotelByOwnerRequest.ValidateAll() if the designated
// constraints aren't met.
type BlockHotelByOwnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockHotelByOwnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockHotelByOwnerRequestMultiError) AllErrors() []error { return m }

// BlockHotelByOwnerRequestValidationError is the validation error returned by
// BlockHotelByOwnerRequest.Validate if the designated constraints aren't met.
type BlockHotelByOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockHotelByOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockHotelByOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockHotelByOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockHotelByOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockHotelByOwnerRequestValidationError) ErrorName() string {
	return "BlockHotelByOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlockHotelByOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockHotelByOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockHotelByOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockHotelByOwnerRequestValidationError{}

// Validate checks the field values on BlockHotelByOwnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockHotelByOwnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockHotelByOwnerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockHotelByOwnerResponseMultiError, or nil if none found.
func (m *BlockHotelByOwnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockHotelByOwnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return BlockHotelByOwnerResponseMultiError(errors)
	}

	return nil
}

// BlockHotelByOwnerResponseMultiError is an error wrapping multiple validation
// errors returned by BlockHotelByOwnerResponse.ValidateAll() if the
// designated constraints aren't met.
type BlockHotelByOwnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockHotelByOwnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockHotelByOwnerResponseMultiError) AllErrors() []error { return m }

// BlockHotelByOwnerResponseValidationError is the validation error returned by
// BlockHotelByOwnerResponse.Validate if the designated constraints aren't met.
type BlockHotelByOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockHotelByOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockHotelByOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockHotelByOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockHotelByOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockHotelByOwnerResponseValidationError) ErrorName() string {
	return "BlockHotelByOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BlockHotelByOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockHotelByOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockHotelByOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockHotelByOwnerResponseValidationError{}

// Validate checks the field values on BlockHotelRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BlockHotelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockHotelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockHotelRequestMultiError, or nil if none found.
func (m *BlockHotelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockHotelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HotelId

	if len(errors) > 0 {
		return BlockHotelRequestMultiError(errors)
	}

	return nil
}

// BlockHotelRequestMultiError is an error wrapping multiple validation errors
// returned by BlockHotelRequest.ValidateAll() if the designated constraints
// aren't met.
type BlockHotelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockHotelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockHotelRequestMultiError) AllErrors() []error { return m }

// BlockHotelRequestValidationError is the validation error returned by
// BlockHotelRequest.Validate if the designated constraints aren't met.
type BlockHotelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockHotelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockHotelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockHotelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockHotelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockHotelRequestValidationError) ErrorName() string {
	return "BlockHotelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlockHotelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockHotelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockHotelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockHotelRequestValidationError{}

// Validate checks the field values on BlockHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockHotelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockHotelResponseMultiError, or nil if none found.
func (m *BlockHotelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockHotelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return BlockHotelResponseMultiError(errors)
	}

	return nil
}

// BlockHotelResponseMultiError is an error wrapping multiple validation errors
// returned by BlockHotelResponse.ValidateAll() if the designated constraints
// aren't met.
type BlockHotelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockHotelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockHotelResponseMultiError) AllErrors() []error { return m }

// BlockHotelResponseValidationError is the validation error returned by
// BlockHotelResponse.Validate if the designated constraints aren't met.
type BlockHotelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockHotelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockHotelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockHotelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockHotelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockHotelResponseValidationError) ErrorName() string {
	return "BlockHotelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BlockHotelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockHotelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockHotelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockHotelResponseValidationError{}

// Validate checks the field values on UnBlockHotelByOwnerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnBlockHotelByOwnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockHotelByOwnerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnBlockHotelByOwnerRequestMultiError, or nil if none found.
func (m *UnBlockHotelByOwnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockHotelByOwnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return UnBlockHotelByOwnerRequestMultiError(errors)
	}

	return nil
}

// UnBlockHotelByOwnerRequestMultiError is an error wrapping multiple
// validation errors returned by UnBlockHotelByOwnerRequest.ValidateAll() if
// the designated constraints aren't met.
type UnBlockHotelByOwnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockHotelByOwnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockHotelByOwnerRequestMultiError) AllErrors() []error { return m }

// UnBlockHotelByOwnerRequestValidationError is the validation error returned
// by UnBlockHotelByOwnerRequest.Validate if the designated constraints aren't met.
type UnBlockHotelByOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockHotelByOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockHotelByOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockHotelByOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockHotelByOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockHotelByOwnerRequestValidationError) ErrorName() string {
	return "UnBlockHotelByOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockHotelByOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockHotelByOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockHotelByOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockHotelByOwnerRequestValidationError{}

// Validate checks the field values on UnBlockHotelByOwnerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnBlockHotelByOwnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockHotelByOwnerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnBlockHotelByOwnerResponseMultiError, or nil if none found.
func (m *UnBlockHotelByOwnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockHotelByOwnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UnBlockHotelByOwnerResponseMultiError(errors)
	}

	return nil
}

// UnBlockHotelByOwnerResponseMultiError is an error wrapping multiple
// validation errors returned by UnBlockHotelByOwnerResponse.ValidateAll() if
// the designated constraints aren't met.
type UnBlockHotelByOwnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockHotelByOwnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockHotelByOwnerResponseMultiError) AllErrors() []error { return m }

// UnBlockHotelByOwnerResponseValidationError is the validation error returned
// by UnBlockHotelByOwnerResponse.Validate if the designated constraints
// aren't met.
type UnBlockHotelByOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockHotelByOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockHotelByOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockHotelByOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockHotelByOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockHotelByOwnerResponseValidationError) ErrorName() string {
	return "UnBlockHotelByOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockHotelByOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockHotelByOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockHotelByOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockHotelByOwnerResponseValidationError{}

// Validate checks the field values on UnBlockHotelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnBlockHotelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockHotelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnBlockHotelRequestMultiError, or nil if none found.
func (m *UnBlockHotelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockHotelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HotelId

	if len(errors) > 0 {
		return UnBlockHotelRequestMultiError(errors)
	}

	return nil
}

// UnBlockHotelRequestMultiError is an error wrapping multiple validation
// errors returned by UnBlockHotelRequest.ValidateAll() if the designated
// constraints aren't met.
type UnBlockHotelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockHotelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockHotelRequestMultiError) AllErrors() []error { return m }

// UnBlockHotelRequestValidationError is the validation error returned by
// UnBlockHotelRequest.Validate if the designated constraints aren't met.
type UnBlockHotelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockHotelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockHotelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockHotelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockHotelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockHotelRequestValidationError) ErrorName() string {
	return "UnBlockHotelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockHotelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockHotelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockHotelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockHotelRequestValidationError{}

// Validate checks the field values on UnBlockHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnBlockHotelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockHotelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnBlockHotelResponseMultiError, or nil if none found.
func (m *UnBlockHotelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockHotelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UnBlockHotelResponseMultiError(errors)
	}

	return nil
}

// UnBlockHotelResponseMultiError is an error wrapping multiple validation
// errors returned by UnBlockHotelResponse.ValidateAll() if the designated
// constraints aren't met.
type UnBlockHotelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockHotelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockHotelResponseMultiError) AllErrors() []error { return m }

// UnBlockHotelResponseValidationError is the validation error returned by
// UnBlockHotelResponse.Validate if the designated constraints aren't met.
type UnBlockHotelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockHotelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockHotelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockHotelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockHotelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockHotelResponseValidationError) ErrorName() string {
	return "UnBlockHotelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockHotelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockHotelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockHotelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockHotelResponseValidationError{}
