// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: way.proto

package arb_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WayService_CreateWay_FullMethodName                      = "/city.WayService/CreateWay"
	WayService_GetWay_FullMethodName                         = "/city.WayService/GetWay"
	WayService_GetWayByStation_FullMethodName                = "/city.WayService/GetWayByStation"
	WayService_GetWayByDestination_FullMethodName            = "/city.WayService/GetWayByDestination"
	WayService_UpdateWay_FullMethodName                      = "/city.WayService/UpdateWay"
	WayService_DeleteWay_FullMethodName                      = "/city.WayService/DeleteWay"
	WayService_ValidateMapAndReturnArivalTime_FullMethodName = "/city.WayService/ValidateMapAndReturnArivalTime"
)

// WayServiceClient is the client API for WayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WayServiceClient interface {
	CreateWay(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*WayResponse, error)
	GetWay(ctx context.Context, in *GetWayByIDRequest, opts ...grpc.CallOption) (*WayResponse, error)
	GetWayByStation(ctx context.Context, in *GetWayByStationRequest, opts ...grpc.CallOption) (*GetWaysResponse, error)
	GetWayByDestination(ctx context.Context, in *GetWayByDestinationRequest, opts ...grpc.CallOption) (*GetWaysResponse, error)
	UpdateWay(ctx context.Context, in *Way, opts ...grpc.CallOption) (*WayResponse, error)
	DeleteWay(ctx context.Context, in *GetWayByIDRequest, opts ...grpc.CallOption) (*DeleteWayResponse, error)
	ValidateMapAndReturnArivalTime(ctx context.Context, in *ValidateMapAndReturnArrivalTimeRequest, opts ...grpc.CallOption) (*ValidateMapAndReturnArrivalTimeResponse, error)
}

type wayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWayServiceClient(cc grpc.ClientConnInterface) WayServiceClient {
	return &wayServiceClient{cc}
}

func (c *wayServiceClient) CreateWay(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*WayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WayResponse)
	err := c.cc.Invoke(ctx, WayService_CreateWay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wayServiceClient) GetWay(ctx context.Context, in *GetWayByIDRequest, opts ...grpc.CallOption) (*WayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WayResponse)
	err := c.cc.Invoke(ctx, WayService_GetWay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wayServiceClient) GetWayByStation(ctx context.Context, in *GetWayByStationRequest, opts ...grpc.CallOption) (*GetWaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWaysResponse)
	err := c.cc.Invoke(ctx, WayService_GetWayByStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wayServiceClient) GetWayByDestination(ctx context.Context, in *GetWayByDestinationRequest, opts ...grpc.CallOption) (*GetWaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWaysResponse)
	err := c.cc.Invoke(ctx, WayService_GetWayByDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wayServiceClient) UpdateWay(ctx context.Context, in *Way, opts ...grpc.CallOption) (*WayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WayResponse)
	err := c.cc.Invoke(ctx, WayService_UpdateWay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wayServiceClient) DeleteWay(ctx context.Context, in *GetWayByIDRequest, opts ...grpc.CallOption) (*DeleteWayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWayResponse)
	err := c.cc.Invoke(ctx, WayService_DeleteWay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wayServiceClient) ValidateMapAndReturnArivalTime(ctx context.Context, in *ValidateMapAndReturnArrivalTimeRequest, opts ...grpc.CallOption) (*ValidateMapAndReturnArrivalTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateMapAndReturnArrivalTimeResponse)
	err := c.cc.Invoke(ctx, WayService_ValidateMapAndReturnArivalTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WayServiceServer is the server API for WayService service.
// All implementations must embed UnimplementedWayServiceServer
// for forward compatibility
type WayServiceServer interface {
	CreateWay(context.Context, *WayRequest) (*WayResponse, error)
	GetWay(context.Context, *GetWayByIDRequest) (*WayResponse, error)
	GetWayByStation(context.Context, *GetWayByStationRequest) (*GetWaysResponse, error)
	GetWayByDestination(context.Context, *GetWayByDestinationRequest) (*GetWaysResponse, error)
	UpdateWay(context.Context, *Way) (*WayResponse, error)
	DeleteWay(context.Context, *GetWayByIDRequest) (*DeleteWayResponse, error)
	ValidateMapAndReturnArivalTime(context.Context, *ValidateMapAndReturnArrivalTimeRequest) (*ValidateMapAndReturnArrivalTimeResponse, error)
	mustEmbedUnimplementedWayServiceServer()
}

// UnimplementedWayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWayServiceServer struct {
}

func (UnimplementedWayServiceServer) CreateWay(context.Context, *WayRequest) (*WayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWay not implemented")
}
func (UnimplementedWayServiceServer) GetWay(context.Context, *GetWayByIDRequest) (*WayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWay not implemented")
}
func (UnimplementedWayServiceServer) GetWayByStation(context.Context, *GetWayByStationRequest) (*GetWaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWayByStation not implemented")
}
func (UnimplementedWayServiceServer) GetWayByDestination(context.Context, *GetWayByDestinationRequest) (*GetWaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWayByDestination not implemented")
}
func (UnimplementedWayServiceServer) UpdateWay(context.Context, *Way) (*WayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWay not implemented")
}
func (UnimplementedWayServiceServer) DeleteWay(context.Context, *GetWayByIDRequest) (*DeleteWayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWay not implemented")
}
func (UnimplementedWayServiceServer) ValidateMapAndReturnArivalTime(context.Context, *ValidateMapAndReturnArrivalTimeRequest) (*ValidateMapAndReturnArrivalTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateMapAndReturnArivalTime not implemented")
}
func (UnimplementedWayServiceServer) mustEmbedUnimplementedWayServiceServer() {}

// UnsafeWayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WayServiceServer will
// result in compilation errors.
type UnsafeWayServiceServer interface {
	mustEmbedUnimplementedWayServiceServer()
}

func RegisterWayServiceServer(s grpc.ServiceRegistrar, srv WayServiceServer) {
	s.RegisterService(&WayService_ServiceDesc, srv)
}

func _WayService_CreateWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WayServiceServer).CreateWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WayService_CreateWay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WayServiceServer).CreateWay(ctx, req.(*WayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WayService_GetWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWayByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WayServiceServer).GetWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WayService_GetWay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WayServiceServer).GetWay(ctx, req.(*GetWayByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WayService_GetWayByStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWayByStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WayServiceServer).GetWayByStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WayService_GetWayByStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WayServiceServer).GetWayByStation(ctx, req.(*GetWayByStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WayService_GetWayByDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWayByDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WayServiceServer).GetWayByDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WayService_GetWayByDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WayServiceServer).GetWayByDestination(ctx, req.(*GetWayByDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WayService_UpdateWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Way)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WayServiceServer).UpdateWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WayService_UpdateWay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WayServiceServer).UpdateWay(ctx, req.(*Way))
	}
	return interceptor(ctx, in, info, handler)
}

func _WayService_DeleteWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWayByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WayServiceServer).DeleteWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WayService_DeleteWay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WayServiceServer).DeleteWay(ctx, req.(*GetWayByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WayService_ValidateMapAndReturnArivalTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateMapAndReturnArrivalTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WayServiceServer).ValidateMapAndReturnArivalTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WayService_ValidateMapAndReturnArivalTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WayServiceServer).ValidateMapAndReturnArivalTime(ctx, req.(*ValidateMapAndReturnArrivalTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WayService_ServiceDesc is the grpc.ServiceDesc for WayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "city.WayService",
	HandlerType: (*WayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWay",
			Handler:    _WayService_CreateWay_Handler,
		},
		{
			MethodName: "GetWay",
			Handler:    _WayService_GetWay_Handler,
		},
		{
			MethodName: "GetWayByStation",
			Handler:    _WayService_GetWayByStation_Handler,
		},
		{
			MethodName: "GetWayByDestination",
			Handler:    _WayService_GetWayByDestination_Handler,
		},
		{
			MethodName: "UpdateWay",
			Handler:    _WayService_UpdateWay_Handler,
		},
		{
			MethodName: "DeleteWay",
			Handler:    _WayService_DeleteWay_Handler,
		},
		{
			MethodName: "ValidateMapAndReturnArivalTime",
			Handler:    _WayService_ValidateMapAndReturnArivalTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "way.proto",
}
