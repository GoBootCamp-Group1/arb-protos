// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: log.proto

package arb_protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SearchLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchLogRequestMultiError, or nil if none found.
func (m *SearchLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	// no validation rules for Jwt

	// no validation rules for EntityID

	// no validation rules for Level

	if len(errors) > 0 {
		return SearchLogRequestMultiError(errors)
	}

	return nil
}

// SearchLogRequestMultiError is an error wrapping multiple validation errors
// returned by SearchLogRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchLogRequestMultiError) AllErrors() []error { return m }

// SearchLogRequestValidationError is the validation error returned by
// SearchLogRequest.Validate if the designated constraints aren't met.
type SearchLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchLogRequestValidationError) ErrorName() string { return "SearchLogRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchLogRequestValidationError{}

// Validate checks the field values on Log with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Log) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Log with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogMultiError, or nil if none found.
func (m *Log) ValidateAll() error {
	return m.validate(true)
}

func (m *Log) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Level

	// no validation rules for Message

	if len(errors) > 0 {
		return LogMultiError(errors)
	}

	return nil
}

// LogMultiError is an error wrapping multiple validation errors returned by
// Log.ValidateAll() if the designated constraints aren't met.
type LogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogMultiError) AllErrors() []error { return m }

// LogValidationError is the validation error returned by Log.Validate if the
// designated constraints aren't met.
type LogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogValidationError) ErrorName() string { return "LogValidationError" }

// Error satisfies the builtin error interface
func (e LogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogValidationError{}

// Validate checks the field values on SearchLogResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchLogResponseMultiError, or nil if none found.
func (m *SearchLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchLogResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchLogResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchLogResponseValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return SearchLogResponseMultiError(errors)
	}

	return nil
}

// SearchLogResponseMultiError is an error wrapping multiple validation errors
// returned by SearchLogResponse.ValidateAll() if the designated constraints
// aren't met.
type SearchLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchLogResponseMultiError) AllErrors() []error { return m }

// SearchLogResponseValidationError is the validation error returned by
// SearchLogResponse.Validate if the designated constraints aren't met.
type SearchLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchLogResponseValidationError) ErrorName() string {
	return "SearchLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchLogResponseValidationError{}
