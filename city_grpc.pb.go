// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: city.proto

package arb_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CityService_CreateCity_FullMethodName = "/city.CityService/CreateCity"
	CityService_GetCity_FullMethodName    = "/city.CityService/GetCity"
	CityService_GetCities_FullMethodName  = "/city.CityService/GetCities"
	CityService_UpdateCity_FullMethodName = "/city.CityService/UpdateCity"
	CityService_DeleteCity_FullMethodName = "/city.CityService/DeleteCity"
)

// CityServiceClient is the client API for CityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CityServiceClient interface {
	CreateCity(ctx context.Context, in *CityRequest, opts ...grpc.CallOption) (*CityResponse, error)
	GetCity(ctx context.Context, in *GetCityByIdRequest, opts ...grpc.CallOption) (*GetCityByIdResponse, error)
	GetCities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCitiesResponse, error)
	UpdateCity(ctx context.Context, in *City, opts ...grpc.CallOption) (*CityResponse, error)
	DeleteCity(ctx context.Context, in *GetCityByIdRequest, opts ...grpc.CallOption) (*DeleteCityResponse, error)
}

type cityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCityServiceClient(cc grpc.ClientConnInterface) CityServiceClient {
	return &cityServiceClient{cc}
}

func (c *cityServiceClient) CreateCity(ctx context.Context, in *CityRequest, opts ...grpc.CallOption) (*CityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityResponse)
	err := c.cc.Invoke(ctx, CityService_CreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) GetCity(ctx context.Context, in *GetCityByIdRequest, opts ...grpc.CallOption) (*GetCityByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCityByIdResponse)
	err := c.cc.Invoke(ctx, CityService_GetCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) GetCities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCitiesResponse)
	err := c.cc.Invoke(ctx, CityService_GetCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) UpdateCity(ctx context.Context, in *City, opts ...grpc.CallOption) (*CityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityResponse)
	err := c.cc.Invoke(ctx, CityService_UpdateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) DeleteCity(ctx context.Context, in *GetCityByIdRequest, opts ...grpc.CallOption) (*DeleteCityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCityResponse)
	err := c.cc.Invoke(ctx, CityService_DeleteCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityServiceServer is the server API for CityService service.
// All implementations must embed UnimplementedCityServiceServer
// for forward compatibility
type CityServiceServer interface {
	CreateCity(context.Context, *CityRequest) (*CityResponse, error)
	GetCity(context.Context, *GetCityByIdRequest) (*GetCityByIdResponse, error)
	GetCities(context.Context, *Empty) (*GetCitiesResponse, error)
	UpdateCity(context.Context, *City) (*CityResponse, error)
	DeleteCity(context.Context, *GetCityByIdRequest) (*DeleteCityResponse, error)
	mustEmbedUnimplementedCityServiceServer()
}

// UnimplementedCityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCityServiceServer struct {
}

func (UnimplementedCityServiceServer) CreateCity(context.Context, *CityRequest) (*CityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCity not implemented")
}
func (UnimplementedCityServiceServer) GetCity(context.Context, *GetCityByIdRequest) (*GetCityByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCity not implemented")
}
func (UnimplementedCityServiceServer) GetCities(context.Context, *Empty) (*GetCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCities not implemented")
}
func (UnimplementedCityServiceServer) UpdateCity(context.Context, *City) (*CityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCity not implemented")
}
func (UnimplementedCityServiceServer) DeleteCity(context.Context, *GetCityByIdRequest) (*DeleteCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedCityServiceServer) mustEmbedUnimplementedCityServiceServer() {}

// UnsafeCityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CityServiceServer will
// result in compilation errors.
type UnsafeCityServiceServer interface {
	mustEmbedUnimplementedCityServiceServer()
}

func RegisterCityServiceServer(s grpc.ServiceRegistrar, srv CityServiceServer) {
	s.RegisterService(&CityService_ServiceDesc, srv)
}

func _CityService_CreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).CreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_CreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).CreateCity(ctx, req.(*CityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_GetCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).GetCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_GetCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).GetCity(ctx, req.(*GetCityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_GetCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).GetCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_GetCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).GetCities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_UpdateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(City)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).UpdateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_UpdateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).UpdateCity(ctx, req.(*City))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_DeleteCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).DeleteCity(ctx, req.(*GetCityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CityService_ServiceDesc is the grpc.ServiceDesc for CityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "city.CityService",
	HandlerType: (*CityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCity",
			Handler:    _CityService_CreateCity_Handler,
		},
		{
			MethodName: "GetCity",
			Handler:    _CityService_GetCity_Handler,
		},
		{
			MethodName: "GetCities",
			Handler:    _CityService_GetCities_Handler,
		},
		{
			MethodName: "UpdateCity",
			Handler:    _CityService_UpdateCity_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _CityService_DeleteCity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "city.proto",
}
