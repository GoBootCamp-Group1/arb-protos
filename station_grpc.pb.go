// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: station.proto

package arb_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StationService_CreateStation_FullMethodName     = "/station.StationService/CreateStation"
	StationService_GetStation_FullMethodName        = "/station.StationService/GetStation"
	StationService_GetStationsByCity_FullMethodName = "/station.StationService/GetStationsByCity"
	StationService_GetStationsByType_FullMethodName = "/station.StationService/GetStationsByType"
	StationService_UpdateStation_FullMethodName     = "/station.StationService/UpdateStation"
	StationService_DeleteStation_FullMethodName     = "/station.StationService/DeleteStation"
)

// StationServiceClient is the client API for StationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StationServiceClient interface {
	CreateStation(ctx context.Context, in *StationRequest, opts ...grpc.CallOption) (*GetStationResponse, error)
	GetStation(ctx context.Context, in *GetStationByIDRequest, opts ...grpc.CallOption) (*GetStationResponse, error)
	GetStationsByCity(ctx context.Context, in *GetStationByCityRequest, opts ...grpc.CallOption) (*GetStationsResponse, error)
	GetStationsByType(ctx context.Context, in *GetStationByTypeRequest, opts ...grpc.CallOption) (*GetStationsResponse, error)
	UpdateStation(ctx context.Context, in *Station, opts ...grpc.CallOption) (*GetStationResponse, error)
	DeleteStation(ctx context.Context, in *GetStationByIDRequest, opts ...grpc.CallOption) (*DeleteStationResponse, error)
}

type stationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStationServiceClient(cc grpc.ClientConnInterface) StationServiceClient {
	return &stationServiceClient{cc}
}

func (c *stationServiceClient) CreateStation(ctx context.Context, in *StationRequest, opts ...grpc.CallOption) (*GetStationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStationResponse)
	err := c.cc.Invoke(ctx, StationService_CreateStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) GetStation(ctx context.Context, in *GetStationByIDRequest, opts ...grpc.CallOption) (*GetStationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStationResponse)
	err := c.cc.Invoke(ctx, StationService_GetStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) GetStationsByCity(ctx context.Context, in *GetStationByCityRequest, opts ...grpc.CallOption) (*GetStationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStationsResponse)
	err := c.cc.Invoke(ctx, StationService_GetStationsByCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) GetStationsByType(ctx context.Context, in *GetStationByTypeRequest, opts ...grpc.CallOption) (*GetStationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStationsResponse)
	err := c.cc.Invoke(ctx, StationService_GetStationsByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) UpdateStation(ctx context.Context, in *Station, opts ...grpc.CallOption) (*GetStationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStationResponse)
	err := c.cc.Invoke(ctx, StationService_UpdateStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) DeleteStation(ctx context.Context, in *GetStationByIDRequest, opts ...grpc.CallOption) (*DeleteStationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStationResponse)
	err := c.cc.Invoke(ctx, StationService_DeleteStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StationServiceServer is the server API for StationService service.
// All implementations must embed UnimplementedStationServiceServer
// for forward compatibility
type StationServiceServer interface {
	CreateStation(context.Context, *StationRequest) (*GetStationResponse, error)
	GetStation(context.Context, *GetStationByIDRequest) (*GetStationResponse, error)
	GetStationsByCity(context.Context, *GetStationByCityRequest) (*GetStationsResponse, error)
	GetStationsByType(context.Context, *GetStationByTypeRequest) (*GetStationsResponse, error)
	UpdateStation(context.Context, *Station) (*GetStationResponse, error)
	DeleteStation(context.Context, *GetStationByIDRequest) (*DeleteStationResponse, error)
	mustEmbedUnimplementedStationServiceServer()
}

// UnimplementedStationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStationServiceServer struct {
}

func (UnimplementedStationServiceServer) CreateStation(context.Context, *StationRequest) (*GetStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStation not implemented")
}
func (UnimplementedStationServiceServer) GetStation(context.Context, *GetStationByIDRequest) (*GetStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStation not implemented")
}
func (UnimplementedStationServiceServer) GetStationsByCity(context.Context, *GetStationByCityRequest) (*GetStationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationsByCity not implemented")
}
func (UnimplementedStationServiceServer) GetStationsByType(context.Context, *GetStationByTypeRequest) (*GetStationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationsByType not implemented")
}
func (UnimplementedStationServiceServer) UpdateStation(context.Context, *Station) (*GetStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStation not implemented")
}
func (UnimplementedStationServiceServer) DeleteStation(context.Context, *GetStationByIDRequest) (*DeleteStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStation not implemented")
}
func (UnimplementedStationServiceServer) mustEmbedUnimplementedStationServiceServer() {}

// UnsafeStationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StationServiceServer will
// result in compilation errors.
type UnsafeStationServiceServer interface {
	mustEmbedUnimplementedStationServiceServer()
}

func RegisterStationServiceServer(s grpc.ServiceRegistrar, srv StationServiceServer) {
	s.RegisterService(&StationService_ServiceDesc, srv)
}

func _StationService_CreateStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).CreateStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_CreateStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).CreateStation(ctx, req.(*StationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_GetStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).GetStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_GetStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).GetStation(ctx, req.(*GetStationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_GetStationsByCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStationByCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).GetStationsByCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_GetStationsByCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).GetStationsByCity(ctx, req.(*GetStationByCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_GetStationsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStationByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).GetStationsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_GetStationsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).GetStationsByType(ctx, req.(*GetStationByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_UpdateStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Station)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).UpdateStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_UpdateStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).UpdateStation(ctx, req.(*Station))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_DeleteStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).DeleteStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_DeleteStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).DeleteStation(ctx, req.(*GetStationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StationService_ServiceDesc is the grpc.ServiceDesc for StationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "station.StationService",
	HandlerType: (*StationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStation",
			Handler:    _StationService_CreateStation_Handler,
		},
		{
			MethodName: "GetStation",
			Handler:    _StationService_GetStation_Handler,
		},
		{
			MethodName: "GetStationsByCity",
			Handler:    _StationService_GetStationsByCity_Handler,
		},
		{
			MethodName: "GetStationsByType",
			Handler:    _StationService_GetStationsByType_Handler,
		},
		{
			MethodName: "UpdateStation",
			Handler:    _StationService_UpdateStation_Handler,
		},
		{
			MethodName: "DeleteStation",
			Handler:    _StationService_DeleteStation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "station.proto",
}
