// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: api/grpc/proto/transportation.proto

package arb_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TransportationService_CreateTransportation_FullMethodName        = "/transportation.TransportationService/CreateTransportation"
	TransportationService_GetTransportation_FullMethodName           = "/transportation.TransportationService/GetTransportation"
	TransportationService_UpdateTransportation_FullMethodName        = "/transportation.TransportationService/UpdateTransportation"
	TransportationService_DeleteTransportation_FullMethodName        = "/transportation.TransportationService/DeleteTransportation"
	TransportationService_ListTransportationCompanies_FullMethodName = "/transportation.TransportationService/ListTransportationCompanies"
	TransportationService_ListTransportationsByOwner_FullMethodName  = "/transportation.TransportationService/ListTransportationsByOwner"
)

// TransportationServiceClient is the client API for TransportationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportationServiceClient interface {
	CreateTransportation(ctx context.Context, in *CreateTransportationRequest, opts ...grpc.CallOption) (*CreateTransportationResponse, error)
	GetTransportation(ctx context.Context, in *GetTransportationRequest, opts ...grpc.CallOption) (*GetTransportationResponse, error)
	UpdateTransportation(ctx context.Context, in *UpdateTransportationRequest, opts ...grpc.CallOption) (*UpdateTransportationResponse, error)
	DeleteTransportation(ctx context.Context, in *DeleteTransportationRequest, opts ...grpc.CallOption) (*DeleteTransportationResponse, error)
	ListTransportationCompanies(ctx context.Context, in *ListTransportationCompaniesRequest, opts ...grpc.CallOption) (*ListTransportationCompaniesResponse, error)
	ListTransportationsByOwner(ctx context.Context, in *ListTransportationsByOwnerRequest, opts ...grpc.CallOption) (*ListTransportationsByOwnerResponse, error)
}

type transportationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportationServiceClient(cc grpc.ClientConnInterface) TransportationServiceClient {
	return &transportationServiceClient{cc}
}

func (c *transportationServiceClient) CreateTransportation(ctx context.Context, in *CreateTransportationRequest, opts ...grpc.CallOption) (*CreateTransportationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransportationResponse)
	err := c.cc.Invoke(ctx, TransportationService_CreateTransportation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportationServiceClient) GetTransportation(ctx context.Context, in *GetTransportationRequest, opts ...grpc.CallOption) (*GetTransportationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransportationResponse)
	err := c.cc.Invoke(ctx, TransportationService_GetTransportation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportationServiceClient) UpdateTransportation(ctx context.Context, in *UpdateTransportationRequest, opts ...grpc.CallOption) (*UpdateTransportationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTransportationResponse)
	err := c.cc.Invoke(ctx, TransportationService_UpdateTransportation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportationServiceClient) DeleteTransportation(ctx context.Context, in *DeleteTransportationRequest, opts ...grpc.CallOption) (*DeleteTransportationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTransportationResponse)
	err := c.cc.Invoke(ctx, TransportationService_DeleteTransportation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportationServiceClient) ListTransportationCompanies(ctx context.Context, in *ListTransportationCompaniesRequest, opts ...grpc.CallOption) (*ListTransportationCompaniesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransportationCompaniesResponse)
	err := c.cc.Invoke(ctx, TransportationService_ListTransportationCompanies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportationServiceClient) ListTransportationsByOwner(ctx context.Context, in *ListTransportationsByOwnerRequest, opts ...grpc.CallOption) (*ListTransportationsByOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransportationsByOwnerResponse)
	err := c.cc.Invoke(ctx, TransportationService_ListTransportationsByOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportationServiceServer is the server API for TransportationService service.
// All implementations must embed UnimplementedTransportationServiceServer
// for forward compatibility
type TransportationServiceServer interface {
	CreateTransportation(context.Context, *CreateTransportationRequest) (*CreateTransportationResponse, error)
	GetTransportation(context.Context, *GetTransportationRequest) (*GetTransportationResponse, error)
	UpdateTransportation(context.Context, *UpdateTransportationRequest) (*UpdateTransportationResponse, error)
	DeleteTransportation(context.Context, *DeleteTransportationRequest) (*DeleteTransportationResponse, error)
	ListTransportationCompanies(context.Context, *ListTransportationCompaniesRequest) (*ListTransportationCompaniesResponse, error)
	ListTransportationsByOwner(context.Context, *ListTransportationsByOwnerRequest) (*ListTransportationsByOwnerResponse, error)
	mustEmbedUnimplementedTransportationServiceServer()
}

// UnimplementedTransportationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransportationServiceServer struct {
}

func (UnimplementedTransportationServiceServer) CreateTransportation(context.Context, *CreateTransportationRequest) (*CreateTransportationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransportation not implemented")
}
func (UnimplementedTransportationServiceServer) GetTransportation(context.Context, *GetTransportationRequest) (*GetTransportationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransportation not implemented")
}
func (UnimplementedTransportationServiceServer) UpdateTransportation(context.Context, *UpdateTransportationRequest) (*UpdateTransportationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransportation not implemented")
}
func (UnimplementedTransportationServiceServer) DeleteTransportation(context.Context, *DeleteTransportationRequest) (*DeleteTransportationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransportation not implemented")
}
func (UnimplementedTransportationServiceServer) ListTransportationCompanies(context.Context, *ListTransportationCompaniesRequest) (*ListTransportationCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransportationCompanies not implemented")
}
func (UnimplementedTransportationServiceServer) ListTransportationsByOwner(context.Context, *ListTransportationsByOwnerRequest) (*ListTransportationsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransportationsByOwner not implemented")
}
func (UnimplementedTransportationServiceServer) mustEmbedUnimplementedTransportationServiceServer() {}

// UnsafeTransportationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportationServiceServer will
// result in compilation errors.
type UnsafeTransportationServiceServer interface {
	mustEmbedUnimplementedTransportationServiceServer()
}

func RegisterTransportationServiceServer(s grpc.ServiceRegistrar, srv TransportationServiceServer) {
	s.RegisterService(&TransportationService_ServiceDesc, srv)
}

func _TransportationService_CreateTransportation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransportationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportationServiceServer).CreateTransportation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportationService_CreateTransportation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportationServiceServer).CreateTransportation(ctx, req.(*CreateTransportationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportationService_GetTransportation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransportationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportationServiceServer).GetTransportation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportationService_GetTransportation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportationServiceServer).GetTransportation(ctx, req.(*GetTransportationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportationService_UpdateTransportation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransportationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportationServiceServer).UpdateTransportation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportationService_UpdateTransportation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportationServiceServer).UpdateTransportation(ctx, req.(*UpdateTransportationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportationService_DeleteTransportation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransportationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportationServiceServer).DeleteTransportation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportationService_DeleteTransportation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportationServiceServer).DeleteTransportation(ctx, req.(*DeleteTransportationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportationService_ListTransportationCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransportationCompaniesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportationServiceServer).ListTransportationCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportationService_ListTransportationCompanies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportationServiceServer).ListTransportationCompanies(ctx, req.(*ListTransportationCompaniesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportationService_ListTransportationsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransportationsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportationServiceServer).ListTransportationsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportationService_ListTransportationsByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportationServiceServer).ListTransportationsByOwner(ctx, req.(*ListTransportationsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportationService_ServiceDesc is the grpc.ServiceDesc for TransportationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transportation.TransportationService",
	HandlerType: (*TransportationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransportation",
			Handler:    _TransportationService_CreateTransportation_Handler,
		},
		{
			MethodName: "GetTransportation",
			Handler:    _TransportationService_GetTransportation_Handler,
		},
		{
			MethodName: "UpdateTransportation",
			Handler:    _TransportationService_UpdateTransportation_Handler,
		},
		{
			MethodName: "DeleteTransportation",
			Handler:    _TransportationService_DeleteTransportation_Handler,
		},
		{
			MethodName: "ListTransportationCompanies",
			Handler:    _TransportationService_ListTransportationCompanies_Handler,
		},
		{
			MethodName: "ListTransportationsByOwner",
			Handler:    _TransportationService_ListTransportationsByOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/proto/transportation.proto",
}
