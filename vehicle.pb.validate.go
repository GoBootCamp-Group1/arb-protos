// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: vehicle.proto

package arb_protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MacthVehicleForTripRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MacthVehicleForTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MacthVehicleForTripRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MacthVehicleForTripRequestMultiError, or nil if none found.
func (m *MacthVehicleForTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MacthVehicleForTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetDepartureTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MacthVehicleForTripRequestValidationError{
					field:  "DepartureTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MacthVehicleForTripRequestValidationError{
					field:  "DepartureTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepartureTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MacthVehicleForTripRequestValidationError{
				field:  "DepartureTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PassengersCapacity

	// no validation rules for Price

	if len(errors) > 0 {
		return MacthVehicleForTripRequestMultiError(errors)
	}

	return nil
}

// MacthVehicleForTripRequestMultiError is an error wrapping multiple
// validation errors returned by MacthVehicleForTripRequest.ValidateAll() if
// the designated constraints aren't met.
type MacthVehicleForTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MacthVehicleForTripRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MacthVehicleForTripRequestMultiError) AllErrors() []error { return m }

// MacthVehicleForTripRequestValidationError is the validation error returned
// by MacthVehicleForTripRequest.Validate if the designated constraints aren't met.
type MacthVehicleForTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MacthVehicleForTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MacthVehicleForTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MacthVehicleForTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MacthVehicleForTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MacthVehicleForTripRequestValidationError) ErrorName() string {
	return "MacthVehicleForTripRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MacthVehicleForTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMacthVehicleForTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MacthVehicleForTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MacthVehicleForTripRequestValidationError{}

// Validate checks the field values on MacthVehicleForTripResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MacthVehicleForTripResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MacthVehicleForTripResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MacthVehicleForTripResponseMultiError, or nil if none found.
func (m *MacthVehicleForTripResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MacthVehicleForTripResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VehicleId

	// no validation rules for Speed

	if len(errors) > 0 {
		return MacthVehicleForTripResponseMultiError(errors)
	}

	return nil
}

// MacthVehicleForTripResponseMultiError is an error wrapping multiple
// validation errors returned by MacthVehicleForTripResponse.ValidateAll() if
// the designated constraints aren't met.
type MacthVehicleForTripResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MacthVehicleForTripResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MacthVehicleForTripResponseMultiError) AllErrors() []error { return m }

// MacthVehicleForTripResponseValidationError is the validation error returned
// by MacthVehicleForTripResponse.Validate if the designated constraints
// aren't met.
type MacthVehicleForTripResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MacthVehicleForTripResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MacthVehicleForTripResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MacthVehicleForTripResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MacthVehicleForTripResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MacthVehicleForTripResponseValidationError) ErrorName() string {
	return "MacthVehicleForTripResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MacthVehicleForTripResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMacthVehicleForTripResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MacthVehicleForTripResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MacthVehicleForTripResponseValidationError{}

// Validate checks the field values on BlockVehicleByOwnerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockVehicleByOwnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockVehicleByOwnerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockVehicleByOwnerRequestMultiError, or nil if none found.
func (m *BlockVehicleByOwnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockVehicleByOwnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return BlockVehicleByOwnerRequestMultiError(errors)
	}

	return nil
}

// BlockVehicleByOwnerRequestMultiError is an error wrapping multiple
// validation errors returned by BlockVehicleByOwnerRequest.ValidateAll() if
// the designated constraints aren't met.
type BlockVehicleByOwnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockVehicleByOwnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockVehicleByOwnerRequestMultiError) AllErrors() []error { return m }

// BlockVehicleByOwnerRequestValidationError is the validation error returned
// by BlockVehicleByOwnerRequest.Validate if the designated constraints aren't met.
type BlockVehicleByOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockVehicleByOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockVehicleByOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockVehicleByOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockVehicleByOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockVehicleByOwnerRequestValidationError) ErrorName() string {
	return "BlockVehicleByOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlockVehicleByOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockVehicleByOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockVehicleByOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockVehicleByOwnerRequestValidationError{}

// Validate checks the field values on BlockVehicleByOwnerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockVehicleByOwnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockVehicleByOwnerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockVehicleByOwnerResponseMultiError, or nil if none found.
func (m *BlockVehicleByOwnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockVehicleByOwnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return BlockVehicleByOwnerResponseMultiError(errors)
	}

	return nil
}

// BlockVehicleByOwnerResponseMultiError is an error wrapping multiple
// validation errors returned by BlockVehicleByOwnerResponse.ValidateAll() if
// the designated constraints aren't met.
type BlockVehicleByOwnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockVehicleByOwnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockVehicleByOwnerResponseMultiError) AllErrors() []error { return m }

// BlockVehicleByOwnerResponseValidationError is the validation error returned
// by BlockVehicleByOwnerResponse.Validate if the designated constraints
// aren't met.
type BlockVehicleByOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockVehicleByOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockVehicleByOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockVehicleByOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockVehicleByOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockVehicleByOwnerResponseValidationError) ErrorName() string {
	return "BlockVehicleByOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BlockVehicleByOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockVehicleByOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockVehicleByOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockVehicleByOwnerResponseValidationError{}

// Validate checks the field values on BlockVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockVehicleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockVehicleRequestMultiError, or nil if none found.
func (m *BlockVehicleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockVehicleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VehicleId

	if len(errors) > 0 {
		return BlockVehicleRequestMultiError(errors)
	}

	return nil
}

// BlockVehicleRequestMultiError is an error wrapping multiple validation
// errors returned by BlockVehicleRequest.ValidateAll() if the designated
// constraints aren't met.
type BlockVehicleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockVehicleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockVehicleRequestMultiError) AllErrors() []error { return m }

// BlockVehicleRequestValidationError is the validation error returned by
// BlockVehicleRequest.Validate if the designated constraints aren't met.
type BlockVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockVehicleRequestValidationError) ErrorName() string {
	return "BlockVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlockVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockVehicleRequestValidationError{}

// Validate checks the field values on BlockVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockVehicleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockVehicleResponseMultiError, or nil if none found.
func (m *BlockVehicleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockVehicleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return BlockVehicleResponseMultiError(errors)
	}

	return nil
}

// BlockVehicleResponseMultiError is an error wrapping multiple validation
// errors returned by BlockVehicleResponse.ValidateAll() if the designated
// constraints aren't met.
type BlockVehicleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockVehicleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockVehicleResponseMultiError) AllErrors() []error { return m }

// BlockVehicleResponseValidationError is the validation error returned by
// BlockVehicleResponse.Validate if the designated constraints aren't met.
type BlockVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockVehicleResponseValidationError) ErrorName() string {
	return "BlockVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BlockVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockVehicleResponseValidationError{}

// Validate checks the field values on UnBlockVehicleByOwnerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnBlockVehicleByOwnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockVehicleByOwnerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnBlockVehicleByOwnerRequestMultiError, or nil if none found.
func (m *UnBlockVehicleByOwnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockVehicleByOwnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return UnBlockVehicleByOwnerRequestMultiError(errors)
	}

	return nil
}

// UnBlockVehicleByOwnerRequestMultiError is an error wrapping multiple
// validation errors returned by UnBlockVehicleByOwnerRequest.ValidateAll() if
// the designated constraints aren't met.
type UnBlockVehicleByOwnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockVehicleByOwnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockVehicleByOwnerRequestMultiError) AllErrors() []error { return m }

// UnBlockVehicleByOwnerRequestValidationError is the validation error returned
// by UnBlockVehicleByOwnerRequest.Validate if the designated constraints
// aren't met.
type UnBlockVehicleByOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockVehicleByOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockVehicleByOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockVehicleByOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockVehicleByOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockVehicleByOwnerRequestValidationError) ErrorName() string {
	return "UnBlockVehicleByOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockVehicleByOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockVehicleByOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockVehicleByOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockVehicleByOwnerRequestValidationError{}

// Validate checks the field values on UnBlockVehicleByOwnerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnBlockVehicleByOwnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockVehicleByOwnerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnBlockVehicleByOwnerResponseMultiError, or nil if none found.
func (m *UnBlockVehicleByOwnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockVehicleByOwnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UnBlockVehicleByOwnerResponseMultiError(errors)
	}

	return nil
}

// UnBlockVehicleByOwnerResponseMultiError is an error wrapping multiple
// validation errors returned by UnBlockVehicleByOwnerResponse.ValidateAll()
// if the designated constraints aren't met.
type UnBlockVehicleByOwnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockVehicleByOwnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockVehicleByOwnerResponseMultiError) AllErrors() []error { return m }

// UnBlockVehicleByOwnerResponseValidationError is the validation error
// returned by UnBlockVehicleByOwnerResponse.Validate if the designated
// constraints aren't met.
type UnBlockVehicleByOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockVehicleByOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockVehicleByOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockVehicleByOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockVehicleByOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockVehicleByOwnerResponseValidationError) ErrorName() string {
	return "UnBlockVehicleByOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockVehicleByOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockVehicleByOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockVehicleByOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockVehicleByOwnerResponseValidationError{}

// Validate checks the field values on UnBlockVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnBlockVehicleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnBlockVehicleRequestMultiError, or nil if none found.
func (m *UnBlockVehicleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockVehicleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VehicleId

	if len(errors) > 0 {
		return UnBlockVehicleRequestMultiError(errors)
	}

	return nil
}

// UnBlockVehicleRequestMultiError is an error wrapping multiple validation
// errors returned by UnBlockVehicleRequest.ValidateAll() if the designated
// constraints aren't met.
type UnBlockVehicleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockVehicleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockVehicleRequestMultiError) AllErrors() []error { return m }

// UnBlockVehicleRequestValidationError is the validation error returned by
// UnBlockVehicleRequest.Validate if the designated constraints aren't met.
type UnBlockVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockVehicleRequestValidationError) ErrorName() string {
	return "UnBlockVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockVehicleRequestValidationError{}

// Validate checks the field values on UnBlockVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnBlockVehicleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnBlockVehicleResponseMultiError, or nil if none found.
func (m *UnBlockVehicleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockVehicleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UnBlockVehicleResponseMultiError(errors)
	}

	return nil
}

// UnBlockVehicleResponseMultiError is an error wrapping multiple validation
// errors returned by UnBlockVehicleResponse.ValidateAll() if the designated
// constraints aren't met.
type UnBlockVehicleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockVehicleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockVehicleResponseMultiError) AllErrors() []error { return m }

// UnBlockVehicleResponseValidationError is the validation error returned by
// UnBlockVehicleResponse.Validate if the designated constraints aren't met.
type UnBlockVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockVehicleResponseValidationError) ErrorName() string {
	return "UnBlockVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockVehicleResponseValidationError{}

// Validate checks the field values on CreateVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVehicleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVehicleRequestMultiError, or nil if none found.
func (m *CreateVehicleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVehicleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	// no validation rules for Speed

	// no validation rules for RentalPricePerHour

	// no validation rules for PassengersCapacity

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetDateOfManufacture()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVehicleRequestValidationError{
					field:  "DateOfManufacture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVehicleRequestValidationError{
					field:  "DateOfManufacture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfManufacture()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVehicleRequestValidationError{
				field:  "DateOfManufacture",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVehicleRequestValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVehicleRequestValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVehicleRequestValidationError{
				field:  "InTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVehicleRequestValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVehicleRequestValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVehicleRequestValidationError{
				field:  "OutTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateVehicleRequestMultiError(errors)
	}

	return nil
}

// CreateVehicleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateVehicleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateVehicleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVehicleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVehicleRequestMultiError) AllErrors() []error { return m }

// CreateVehicleRequestValidationError is the validation error returned by
// CreateVehicleRequest.Validate if the designated constraints aren't met.
type CreateVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVehicleRequestValidationError) ErrorName() string {
	return "CreateVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVehicleRequestValidationError{}

// Validate checks the field values on CreateVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVehicleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVehicleResponseMultiError, or nil if none found.
func (m *CreateVehicleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVehicleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateVehicleResponseMultiError(errors)
	}

	return nil
}

// CreateVehicleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateVehicleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateVehicleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVehicleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVehicleResponseMultiError) AllErrors() []error { return m }

// CreateVehicleResponseValidationError is the validation error returned by
// CreateVehicleResponse.Validate if the designated constraints aren't met.
type CreateVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVehicleResponseValidationError) ErrorName() string {
	return "CreateVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVehicleResponseValidationError{}

// Validate checks the field values on GetVehicleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVehicleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVehicleRequestMultiError, or nil if none found.
func (m *GetVehicleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVehicleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetVehicleRequestMultiError(errors)
	}

	return nil
}

// GetVehicleRequestMultiError is an error wrapping multiple validation errors
// returned by GetVehicleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVehicleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVehicleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVehicleRequestMultiError) AllErrors() []error { return m }

// GetVehicleRequestValidationError is the validation error returned by
// GetVehicleRequest.Validate if the designated constraints aren't met.
type GetVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVehicleRequestValidationError) ErrorName() string {
	return "GetVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVehicleRequestValidationError{}

// Validate checks the field values on GetVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVehicleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVehicleResponseMultiError, or nil if none found.
func (m *GetVehicleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVehicleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OwnerId

	// no validation rules for Speed

	// no validation rules for RentalPricePerHour

	// no validation rules for PassengersCapacity

	if all {
		switch v := interface{}(m.GetDateOfManufacture()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVehicleResponseValidationError{
					field:  "DateOfManufacture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVehicleResponseValidationError{
					field:  "DateOfManufacture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfManufacture()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVehicleResponseValidationError{
				field:  "DateOfManufacture",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVehicleResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVehicleResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVehicleResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVehicleResponseValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVehicleResponseValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVehicleResponseValidationError{
				field:  "InTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVehicleResponseValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVehicleResponseValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVehicleResponseValidationError{
				field:  "OutTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVehicleResponseMultiError(errors)
	}

	return nil
}

// GetVehicleResponseMultiError is an error wrapping multiple validation errors
// returned by GetVehicleResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVehicleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVehicleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVehicleResponseMultiError) AllErrors() []error { return m }

// GetVehicleResponseValidationError is the validation error returned by
// GetVehicleResponse.Validate if the designated constraints aren't met.
type GetVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVehicleResponseValidationError) ErrorName() string {
	return "GetVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVehicleResponseValidationError{}

// Validate checks the field values on UpdateVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVehicleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVehicleRequestMultiError, or nil if none found.
func (m *UpdateVehicleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVehicleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OwnerId

	// no validation rules for Speed

	// no validation rules for RentalPricePerHour

	// no validation rules for PassengersCapacity

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetDateOfManufacture()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVehicleRequestValidationError{
					field:  "DateOfManufacture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVehicleRequestValidationError{
					field:  "DateOfManufacture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfManufacture()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVehicleRequestValidationError{
				field:  "DateOfManufacture",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVehicleRequestValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVehicleRequestValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVehicleRequestValidationError{
				field:  "InTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVehicleRequestValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVehicleRequestValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVehicleRequestValidationError{
				field:  "OutTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVehicleRequestMultiError(errors)
	}

	return nil
}

// UpdateVehicleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateVehicleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateVehicleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVehicleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVehicleRequestMultiError) AllErrors() []error { return m }

// UpdateVehicleRequestValidationError is the validation error returned by
// UpdateVehicleRequest.Validate if the designated constraints aren't met.
type UpdateVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVehicleRequestValidationError) ErrorName() string {
	return "UpdateVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVehicleRequestValidationError{}

// Validate checks the field values on UpdateVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVehicleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVehicleResponseMultiError, or nil if none found.
func (m *UpdateVehicleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVehicleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateVehicleResponseMultiError(errors)
	}

	return nil
}

// UpdateVehicleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateVehicleResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateVehicleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVehicleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVehicleResponseMultiError) AllErrors() []error { return m }

// UpdateVehicleResponseValidationError is the validation error returned by
// UpdateVehicleResponse.Validate if the designated constraints aren't met.
type UpdateVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVehicleResponseValidationError) ErrorName() string {
	return "UpdateVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVehicleResponseValidationError{}

// Validate checks the field values on DeleteVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteVehicleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteVehicleRequestMultiError, or nil if none found.
func (m *DeleteVehicleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVehicleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteVehicleRequestMultiError(errors)
	}

	return nil
}

// DeleteVehicleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteVehicleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteVehicleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVehicleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVehicleRequestMultiError) AllErrors() []error { return m }

// DeleteVehicleRequestValidationError is the validation error returned by
// DeleteVehicleRequest.Validate if the designated constraints aren't met.
type DeleteVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVehicleRequestValidationError) ErrorName() string {
	return "DeleteVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVehicleRequestValidationError{}

// Validate checks the field values on DeleteVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteVehicleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteVehicleResponseMultiError, or nil if none found.
func (m *DeleteVehicleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVehicleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteVehicleResponseMultiError(errors)
	}

	return nil
}

// DeleteVehicleResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteVehicleResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteVehicleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVehicleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVehicleResponseMultiError) AllErrors() []error { return m }

// DeleteVehicleResponseValidationError is the validation error returned by
// DeleteVehicleResponse.Validate if the designated constraints aren't met.
type DeleteVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVehicleResponseValidationError) ErrorName() string {
	return "DeleteVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVehicleResponseValidationError{}

// Validate checks the field values on ListVehiclesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVehiclesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVehiclesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVehiclesRequestMultiError, or nil if none found.
func (m *ListVehiclesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVehiclesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return ListVehiclesRequestMultiError(errors)
	}

	return nil
}

// ListVehiclesRequestMultiError is an error wrapping multiple validation
// errors returned by ListVehiclesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListVehiclesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVehiclesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVehiclesRequestMultiError) AllErrors() []error { return m }

// ListVehiclesRequestValidationError is the validation error returned by
// ListVehiclesRequest.Validate if the designated constraints aren't met.
type ListVehiclesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVehiclesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVehiclesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVehiclesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVehiclesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVehiclesRequestValidationError) ErrorName() string {
	return "ListVehiclesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVehiclesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVehiclesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVehiclesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVehiclesRequestValidationError{}

// Validate checks the field values on ListVehiclesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVehiclesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVehiclesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVehiclesResponseMultiError, or nil if none found.
func (m *ListVehiclesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVehiclesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVehicles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListVehiclesResponseValidationError{
						field:  fmt.Sprintf("Vehicles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListVehiclesResponseValidationError{
						field:  fmt.Sprintf("Vehicles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVehiclesResponseValidationError{
					field:  fmt.Sprintf("Vehicles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListVehiclesResponseMultiError(errors)
	}

	return nil
}

// ListVehiclesResponseMultiError is an error wrapping multiple validation
// errors returned by ListVehiclesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListVehiclesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVehiclesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVehiclesResponseMultiError) AllErrors() []error { return m }

// ListVehiclesResponseValidationError is the validation error returned by
// ListVehiclesResponse.Validate if the designated constraints aren't met.
type ListVehiclesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVehiclesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVehiclesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVehiclesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVehiclesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVehiclesResponseValidationError) ErrorName() string {
	return "ListVehiclesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVehiclesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVehiclesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVehiclesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVehiclesResponseValidationError{}

// Validate checks the field values on ChangeVehicleStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeVehicleStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeVehicleStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeVehicleStatusRequestMultiError, or nil if none found.
func (m *ChangeVehicleStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeVehicleStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return ChangeVehicleStatusRequestMultiError(errors)
	}

	return nil
}

// ChangeVehicleStatusRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeVehicleStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeVehicleStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeVehicleStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeVehicleStatusRequestMultiError) AllErrors() []error { return m }

// ChangeVehicleStatusRequestValidationError is the validation error returned
// by ChangeVehicleStatusRequest.Validate if the designated constraints aren't met.
type ChangeVehicleStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeVehicleStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeVehicleStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeVehicleStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeVehicleStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeVehicleStatusRequestValidationError) ErrorName() string {
	return "ChangeVehicleStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeVehicleStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeVehicleStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeVehicleStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeVehicleStatusRequestValidationError{}

// Validate checks the field values on ChangeVehicleStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeVehicleStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeVehicleStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeVehicleStatusResponseMultiError, or nil if none found.
func (m *ChangeVehicleStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeVehicleStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return ChangeVehicleStatusResponseMultiError(errors)
	}

	return nil
}

// ChangeVehicleStatusResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeVehicleStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeVehicleStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeVehicleStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeVehicleStatusResponseMultiError) AllErrors() []error { return m }

// ChangeVehicleStatusResponseValidationError is the validation error returned
// by ChangeVehicleStatusResponse.Validate if the designated constraints
// aren't met.
type ChangeVehicleStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeVehicleStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeVehicleStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeVehicleStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeVehicleStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeVehicleStatusResponseValidationError) ErrorName() string {
	return "ChangeVehicleStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeVehicleStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeVehicleStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeVehicleStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeVehicleStatusResponseValidationError{}

// Validate checks the field values on Vehicle with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Vehicle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Vehicle with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VehicleMultiError, or nil if none found.
func (m *Vehicle) ValidateAll() error {
	return m.validate(true)
}

func (m *Vehicle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OwnerId

	// no validation rules for Speed

	// no validation rules for RentalPricePerHour

	// no validation rules for PassengersCapacity

	if all {
		switch v := interface{}(m.GetDateOfManufacture()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "DateOfManufacture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "DateOfManufacture",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfManufacture()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VehicleValidationError{
				field:  "DateOfManufacture",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VehicleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "InTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VehicleValidationError{
				field:  "InTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "OutTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VehicleValidationError{
				field:  "OutTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VehicleMultiError(errors)
	}

	return nil
}

// VehicleMultiError is an error wrapping multiple validation errors returned
// by Vehicle.ValidateAll() if the designated constraints aren't met.
type VehicleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VehicleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VehicleMultiError) AllErrors() []error { return m }

// VehicleValidationError is the validation error returned by Vehicle.Validate
// if the designated constraints aren't met.
type VehicleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VehicleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VehicleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VehicleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VehicleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VehicleValidationError) ErrorName() string { return "VehicleValidationError" }

// Error satisfies the builtin error interface
func (e VehicleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVehicle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VehicleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VehicleValidationError{}
