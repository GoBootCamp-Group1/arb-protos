// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: role.proto

package arb_protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleRequestMultiError, or nil if none found.
func (m *CreateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := CreateRoleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 3 {
		err := CreateRoleRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Jwt

	if len(errors) > 0 {
		return CreateRoleRequestMultiError(errors)
	}

	return nil
}

// CreateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRequestMultiError) AllErrors() []error { return m }

// CreateRoleRequestValidationError is the validation error returned by
// CreateRoleRequest.Validate if the designated constraints aren't met.
type CreateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRequestValidationError) ErrorName() string {
	return "CreateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRequestValidationError{}

// Validate checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleResponseMultiError, or nil if none found.
func (m *CreateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Id

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return CreateRoleResponseMultiError(errors)
	}

	return nil
}

// CreateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleResponseMultiError) AllErrors() []error { return m }

// CreateRoleResponseValidationError is the validation error returned by
// CreateRoleResponse.Validate if the designated constraints aren't met.
type CreateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleResponseValidationError) ErrorName() string {
	return "CreateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleResponseValidationError{}

// Validate checks the field values on UpdateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleRequestMultiError, or nil if none found.
func (m *UpdateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := UpdateRoleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 3 {
		err := UpdateRoleRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Jwt

	if len(errors) > 0 {
		return UpdateRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRequestMultiError) AllErrors() []error { return m }

// UpdateRoleRequestValidationError is the validation error returned by
// UpdateRoleRequest.Validate if the designated constraints aren't met.
type UpdateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRequestValidationError) ErrorName() string {
	return "UpdateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRequestValidationError{}

// Validate checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleResponseMultiError, or nil if none found.
func (m *UpdateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return UpdateRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleResponseMultiError) AllErrors() []error { return m }

// UpdateRoleResponseValidationError is the validation error returned by
// UpdateRoleResponse.Validate if the designated constraints aren't met.
type UpdateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleResponseValidationError) ErrorName() string {
	return "UpdateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleResponseValidationError{}

// Validate checks the field values on GetRoleByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleByIdRequestMultiError, or nil if none found.
func (m *GetRoleByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Jwt

	if len(errors) > 0 {
		return GetRoleByIdRequestMultiError(errors)
	}

	return nil
}

// GetRoleByIdRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoleByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoleByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleByIdRequestMultiError) AllErrors() []error { return m }

// GetRoleByIdRequestValidationError is the validation error returned by
// GetRoleByIdRequest.Validate if the designated constraints aren't met.
type GetRoleByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleByIdRequestValidationError) ErrorName() string {
	return "GetRoleByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleByIdRequestValidationError{}

// Validate checks the field values on GetRoleByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleByIdResponseMultiError, or nil if none found.
func (m *GetRoleByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoleByIdResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoleByIdResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoleByIdResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return GetRoleByIdResponseMultiError(errors)
	}

	return nil
}

// GetRoleByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetRoleByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRoleByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleByIdResponseMultiError) AllErrors() []error { return m }

// GetRoleByIdResponseValidationError is the validation error returned by
// GetRoleByIdResponse.Validate if the designated constraints aren't met.
type GetRoleByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleByIdResponseValidationError) ErrorName() string {
	return "GetRoleByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleByIdResponseValidationError{}

// Validate checks the field values on GetRoleByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleByNameRequestMultiError, or nil if none found.
func (m *GetRoleByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := GetRoleByNameRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Jwt

	if len(errors) > 0 {
		return GetRoleByNameRequestMultiError(errors)
	}

	return nil
}

// GetRoleByNameRequestMultiError is an error wrapping multiple validation
// errors returned by GetRoleByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRoleByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleByNameRequestMultiError) AllErrors() []error { return m }

// GetRoleByNameRequestValidationError is the validation error returned by
// GetRoleByNameRequest.Validate if the designated constraints aren't met.
type GetRoleByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleByNameRequestValidationError) ErrorName() string {
	return "GetRoleByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleByNameRequestValidationError{}

// Validate checks the field values on GetRoleByNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleByNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleByNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleByNameResponseMultiError, or nil if none found.
func (m *GetRoleByNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleByNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoleByNameResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoleByNameResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoleByNameResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return GetRoleByNameResponseMultiError(errors)
	}

	return nil
}

// GetRoleByNameResponseMultiError is an error wrapping multiple validation
// errors returned by GetRoleByNameResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRoleByNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleByNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleByNameResponseMultiError) AllErrors() []error { return m }

// GetRoleByNameResponseValidationError is the validation error returned by
// GetRoleByNameResponse.Validate if the designated constraints aren't met.
type GetRoleByNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleByNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleByNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleByNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleByNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleByNameResponseValidationError) ErrorName() string {
	return "GetRoleByNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleByNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleByNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleByNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleByNameResponseValidationError{}

// Validate checks the field values on DeleteRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleRequestMultiError, or nil if none found.
func (m *DeleteRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Jwt

	if len(errors) > 0 {
		return DeleteRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRequestMultiError) AllErrors() []error { return m }

// DeleteRoleRequestValidationError is the validation error returned by
// DeleteRoleRequest.Validate if the designated constraints aren't met.
type DeleteRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRequestValidationError) ErrorName() string {
	return "DeleteRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRequestValidationError{}

// Validate checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleResponseMultiError, or nil if none found.
func (m *DeleteRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return DeleteRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteRoleResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleResponseMultiError) AllErrors() []error { return m }

// DeleteRoleResponseValidationError is the validation error returned by
// DeleteRoleResponse.Validate if the designated constraints aren't met.
type DeleteRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleResponseValidationError) ErrorName() string {
	return "DeleteRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleResponseValidationError{}

// Validate checks the field values on GetAllRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllRolesRequestMultiError, or nil if none found.
func (m *GetAllRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Jwt

	if len(errors) > 0 {
		return GetAllRolesRequestMultiError(errors)
	}

	return nil
}

// GetAllRolesRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRolesRequestMultiError) AllErrors() []error { return m }

// GetAllRolesRequestValidationError is the validation error returned by
// GetAllRolesRequest.Validate if the designated constraints aren't met.
type GetAllRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRolesRequestValidationError) ErrorName() string {
	return "GetAllRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRolesRequestValidationError{}

// Validate checks the field values on GetAllRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllRolesResponseMultiError, or nil if none found.
func (m *GetAllRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return GetAllRolesResponseMultiError(errors)
	}

	return nil
}

// GetAllRolesResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllRolesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRolesResponseMultiError) AllErrors() []error { return m }

// GetAllRolesResponseValidationError is the validation error returned by
// GetAllRolesResponse.Validate if the designated constraints aren't met.
type GetAllRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRolesResponseValidationError) ErrorName() string {
	return "GetAllRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRolesResponseValidationError{}

// Validate checks the field values on AddRolePermsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRolePermsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRolePermsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRolePermsRequestMultiError, or nil if none found.
func (m *AddRolePermsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRolePermsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Jwt

	if len(errors) > 0 {
		return AddRolePermsRequestMultiError(errors)
	}

	return nil
}

// AddRolePermsRequestMultiError is an error wrapping multiple validation
// errors returned by AddRolePermsRequest.ValidateAll() if the designated
// constraints aren't met.
type AddRolePermsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRolePermsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRolePermsRequestMultiError) AllErrors() []error { return m }

// AddRolePermsRequestValidationError is the validation error returned by
// AddRolePermsRequest.Validate if the designated constraints aren't met.
type AddRolePermsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRolePermsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRolePermsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRolePermsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRolePermsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRolePermsRequestValidationError) ErrorName() string {
	return "AddRolePermsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRolePermsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRolePermsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRolePermsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRolePermsRequestValidationError{}

// Validate checks the field values on AddRolePermsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRolePermsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRolePermsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRolePermsResponseMultiError, or nil if none found.
func (m *AddRolePermsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRolePermsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return AddRolePermsResponseMultiError(errors)
	}

	return nil
}

// AddRolePermsResponseMultiError is an error wrapping multiple validation
// errors returned by AddRolePermsResponse.ValidateAll() if the designated
// constraints aren't met.
type AddRolePermsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRolePermsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRolePermsResponseMultiError) AllErrors() []error { return m }

// AddRolePermsResponseValidationError is the validation error returned by
// AddRolePermsResponse.Validate if the designated constraints aren't met.
type AddRolePermsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRolePermsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRolePermsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRolePermsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRolePermsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRolePermsResponseValidationError) ErrorName() string {
	return "AddRolePermsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddRolePermsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRolePermsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRolePermsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRolePermsResponseValidationError{}

// Validate checks the field values on RemoveRolePermsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveRolePermsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveRolePermsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveRolePermsRequestMultiError, or nil if none found.
func (m *RemoveRolePermsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveRolePermsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Jwt

	if len(errors) > 0 {
		return RemoveRolePermsRequestMultiError(errors)
	}

	return nil
}

// RemoveRolePermsRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveRolePermsRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveRolePermsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveRolePermsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveRolePermsRequestMultiError) AllErrors() []error { return m }

// RemoveRolePermsRequestValidationError is the validation error returned by
// RemoveRolePermsRequest.Validate if the designated constraints aren't met.
type RemoveRolePermsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRolePermsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRolePermsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRolePermsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRolePermsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRolePermsRequestValidationError) ErrorName() string {
	return "RemoveRolePermsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveRolePermsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRolePermsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRolePermsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRolePermsRequestValidationError{}

// Validate checks the field values on RemoveRolePermsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveRolePermsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveRolePermsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveRolePermsResponseMultiError, or nil if none found.
func (m *RemoveRolePermsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveRolePermsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return RemoveRolePermsResponseMultiError(errors)
	}

	return nil
}

// RemoveRolePermsResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveRolePermsResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveRolePermsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveRolePermsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveRolePermsResponseMultiError) AllErrors() []error { return m }

// RemoveRolePermsResponseValidationError is the validation error returned by
// RemoveRolePermsResponse.Validate if the designated constraints aren't met.
type RemoveRolePermsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRolePermsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRolePermsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRolePermsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRolePermsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRolePermsResponseValidationError) ErrorName() string {
	return "RemoveRolePermsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveRolePermsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRolePermsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRolePermsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRolePermsResponseValidationError{}
