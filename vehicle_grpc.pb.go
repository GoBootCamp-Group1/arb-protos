// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: vehicle.proto

package arb_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VehicleService_CreateVehicle_FullMethodName         = "/vehicle.VehicleService/CreateVehicle"
	VehicleService_GetVehicle_FullMethodName            = "/vehicle.VehicleService/GetVehicle"
	VehicleService_UpdateVehicle_FullMethodName         = "/vehicle.VehicleService/UpdateVehicle"
	VehicleService_DeleteVehicle_FullMethodName         = "/vehicle.VehicleService/DeleteVehicle"
	VehicleService_ListVehicles_FullMethodName          = "/vehicle.VehicleService/ListVehicles"
	VehicleService_ChangeVehicleStatus_FullMethodName   = "/vehicle.VehicleService/ChangeVehicleStatus"
	VehicleService_BlockVehicleByOwner_FullMethodName   = "/vehicle.VehicleService/BlockVehicleByOwner"
	VehicleService_BlockVehicle_FullMethodName          = "/vehicle.VehicleService/BlockVehicle"
	VehicleService_UnBlockVehicleByOwner_FullMethodName = "/vehicle.VehicleService/UnBlockVehicleByOwner"
	VehicleService_UnBlockVehicle_FullMethodName        = "/vehicle.VehicleService/UnBlockVehicle"
	VehicleService_MacthVehicleForTrip_FullMethodName   = "/vehicle.VehicleService/MacthVehicleForTrip"
)

// VehicleServiceClient is the client API for VehicleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehicleServiceClient interface {
	CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*CreateVehicleResponse, error)
	GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleResponse, error)
	UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*UpdateVehicleResponse, error)
	DeleteVehicle(ctx context.Context, in *DeleteVehicleRequest, opts ...grpc.CallOption) (*DeleteVehicleResponse, error)
	ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error)
	ChangeVehicleStatus(ctx context.Context, in *ChangeVehicleStatusRequest, opts ...grpc.CallOption) (*ChangeVehicleStatusResponse, error)
	BlockVehicleByOwner(ctx context.Context, in *BlockVehicleByOwnerRequest, opts ...grpc.CallOption) (*BlockVehicleByOwnerResponse, error)
	BlockVehicle(ctx context.Context, in *BlockVehicleRequest, opts ...grpc.CallOption) (*BlockVehicleResponse, error)
	UnBlockVehicleByOwner(ctx context.Context, in *UnBlockVehicleByOwnerRequest, opts ...grpc.CallOption) (*UnBlockVehicleByOwnerResponse, error)
	UnBlockVehicle(ctx context.Context, in *UnBlockVehicleRequest, opts ...grpc.CallOption) (*UnBlockVehicleResponse, error)
	MacthVehicleForTrip(ctx context.Context, in *MacthVehicleForTripRequest, opts ...grpc.CallOption) (*MacthVehicleForTripResponse, error)
}

type vehicleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVehicleServiceClient(cc grpc.ClientConnInterface) VehicleServiceClient {
	return &vehicleServiceClient{cc}
}

func (c *vehicleServiceClient) CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*CreateVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVehicleResponse)
	err := c.cc.Invoke(ctx, VehicleService_CreateVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVehicleResponse)
	err := c.cc.Invoke(ctx, VehicleService_GetVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*UpdateVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVehicleResponse)
	err := c.cc.Invoke(ctx, VehicleService_UpdateVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) DeleteVehicle(ctx context.Context, in *DeleteVehicleRequest, opts ...grpc.CallOption) (*DeleteVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVehicleResponse)
	err := c.cc.Invoke(ctx, VehicleService_DeleteVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVehiclesResponse)
	err := c.cc.Invoke(ctx, VehicleService_ListVehicles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) ChangeVehicleStatus(ctx context.Context, in *ChangeVehicleStatusRequest, opts ...grpc.CallOption) (*ChangeVehicleStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeVehicleStatusResponse)
	err := c.cc.Invoke(ctx, VehicleService_ChangeVehicleStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) BlockVehicleByOwner(ctx context.Context, in *BlockVehicleByOwnerRequest, opts ...grpc.CallOption) (*BlockVehicleByOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockVehicleByOwnerResponse)
	err := c.cc.Invoke(ctx, VehicleService_BlockVehicleByOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) BlockVehicle(ctx context.Context, in *BlockVehicleRequest, opts ...grpc.CallOption) (*BlockVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockVehicleResponse)
	err := c.cc.Invoke(ctx, VehicleService_BlockVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) UnBlockVehicleByOwner(ctx context.Context, in *UnBlockVehicleByOwnerRequest, opts ...grpc.CallOption) (*UnBlockVehicleByOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnBlockVehicleByOwnerResponse)
	err := c.cc.Invoke(ctx, VehicleService_UnBlockVehicleByOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) UnBlockVehicle(ctx context.Context, in *UnBlockVehicleRequest, opts ...grpc.CallOption) (*UnBlockVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnBlockVehicleResponse)
	err := c.cc.Invoke(ctx, VehicleService_UnBlockVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) MacthVehicleForTrip(ctx context.Context, in *MacthVehicleForTripRequest, opts ...grpc.CallOption) (*MacthVehicleForTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MacthVehicleForTripResponse)
	err := c.cc.Invoke(ctx, VehicleService_MacthVehicleForTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VehicleServiceServer is the server API for VehicleService service.
// All implementations must embed UnimplementedVehicleServiceServer
// for forward compatibility
type VehicleServiceServer interface {
	CreateVehicle(context.Context, *CreateVehicleRequest) (*CreateVehicleResponse, error)
	GetVehicle(context.Context, *GetVehicleRequest) (*GetVehicleResponse, error)
	UpdateVehicle(context.Context, *UpdateVehicleRequest) (*UpdateVehicleResponse, error)
	DeleteVehicle(context.Context, *DeleteVehicleRequest) (*DeleteVehicleResponse, error)
	ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesResponse, error)
	ChangeVehicleStatus(context.Context, *ChangeVehicleStatusRequest) (*ChangeVehicleStatusResponse, error)
	BlockVehicleByOwner(context.Context, *BlockVehicleByOwnerRequest) (*BlockVehicleByOwnerResponse, error)
	BlockVehicle(context.Context, *BlockVehicleRequest) (*BlockVehicleResponse, error)
	UnBlockVehicleByOwner(context.Context, *UnBlockVehicleByOwnerRequest) (*UnBlockVehicleByOwnerResponse, error)
	UnBlockVehicle(context.Context, *UnBlockVehicleRequest) (*UnBlockVehicleResponse, error)
	MacthVehicleForTrip(context.Context, *MacthVehicleForTripRequest) (*MacthVehicleForTripResponse, error)
	mustEmbedUnimplementedVehicleServiceServer()
}

// UnimplementedVehicleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVehicleServiceServer struct {
}

func (UnimplementedVehicleServiceServer) CreateVehicle(context.Context, *CreateVehicleRequest) (*CreateVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) GetVehicle(context.Context, *GetVehicleRequest) (*GetVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) UpdateVehicle(context.Context, *UpdateVehicleRequest) (*UpdateVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) DeleteVehicle(context.Context, *DeleteVehicleRequest) (*DeleteVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVehicles not implemented")
}
func (UnimplementedVehicleServiceServer) ChangeVehicleStatus(context.Context, *ChangeVehicleStatusRequest) (*ChangeVehicleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeVehicleStatus not implemented")
}
func (UnimplementedVehicleServiceServer) BlockVehicleByOwner(context.Context, *BlockVehicleByOwnerRequest) (*BlockVehicleByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockVehicleByOwner not implemented")
}
func (UnimplementedVehicleServiceServer) BlockVehicle(context.Context, *BlockVehicleRequest) (*BlockVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) UnBlockVehicleByOwner(context.Context, *UnBlockVehicleByOwnerRequest) (*UnBlockVehicleByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBlockVehicleByOwner not implemented")
}
func (UnimplementedVehicleServiceServer) UnBlockVehicle(context.Context, *UnBlockVehicleRequest) (*UnBlockVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBlockVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) MacthVehicleForTrip(context.Context, *MacthVehicleForTripRequest) (*MacthVehicleForTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MacthVehicleForTrip not implemented")
}
func (UnimplementedVehicleServiceServer) mustEmbedUnimplementedVehicleServiceServer() {}

// UnsafeVehicleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehicleServiceServer will
// result in compilation errors.
type UnsafeVehicleServiceServer interface {
	mustEmbedUnimplementedVehicleServiceServer()
}

func RegisterVehicleServiceServer(s grpc.ServiceRegistrar, srv VehicleServiceServer) {
	s.RegisterService(&VehicleService_ServiceDesc, srv)
}

func _VehicleService_CreateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).CreateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_CreateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).CreateVehicle(ctx, req.(*CreateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_GetVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).GetVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_GetVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).GetVehicle(ctx, req.(*GetVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_UpdateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).UpdateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_UpdateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).UpdateVehicle(ctx, req.(*UpdateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_DeleteVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).DeleteVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_DeleteVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).DeleteVehicle(ctx, req.(*DeleteVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_ListVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVehiclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).ListVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_ListVehicles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).ListVehicles(ctx, req.(*ListVehiclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_ChangeVehicleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeVehicleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).ChangeVehicleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_ChangeVehicleStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).ChangeVehicleStatus(ctx, req.(*ChangeVehicleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_BlockVehicleByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockVehicleByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).BlockVehicleByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_BlockVehicleByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).BlockVehicleByOwner(ctx, req.(*BlockVehicleByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_BlockVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).BlockVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_BlockVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).BlockVehicle(ctx, req.(*BlockVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_UnBlockVehicleByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBlockVehicleByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).UnBlockVehicleByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_UnBlockVehicleByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).UnBlockVehicleByOwner(ctx, req.(*UnBlockVehicleByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_UnBlockVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBlockVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).UnBlockVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_UnBlockVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).UnBlockVehicle(ctx, req.(*UnBlockVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_MacthVehicleForTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacthVehicleForTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).MacthVehicleForTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_MacthVehicleForTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).MacthVehicleForTrip(ctx, req.(*MacthVehicleForTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VehicleService_ServiceDesc is the grpc.ServiceDesc for VehicleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VehicleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vehicle.VehicleService",
	HandlerType: (*VehicleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVehicle",
			Handler:    _VehicleService_CreateVehicle_Handler,
		},
		{
			MethodName: "GetVehicle",
			Handler:    _VehicleService_GetVehicle_Handler,
		},
		{
			MethodName: "UpdateVehicle",
			Handler:    _VehicleService_UpdateVehicle_Handler,
		},
		{
			MethodName: "DeleteVehicle",
			Handler:    _VehicleService_DeleteVehicle_Handler,
		},
		{
			MethodName: "ListVehicles",
			Handler:    _VehicleService_ListVehicles_Handler,
		},
		{
			MethodName: "ChangeVehicleStatus",
			Handler:    _VehicleService_ChangeVehicleStatus_Handler,
		},
		{
			MethodName: "BlockVehicleByOwner",
			Handler:    _VehicleService_BlockVehicleByOwner_Handler,
		},
		{
			MethodName: "BlockVehicle",
			Handler:    _VehicleService_BlockVehicle_Handler,
		},
		{
			MethodName: "UnBlockVehicleByOwner",
			Handler:    _VehicleService_UnBlockVehicleByOwner_Handler,
		},
		{
			MethodName: "UnBlockVehicle",
			Handler:    _VehicleService_UnBlockVehicle_Handler,
		},
		{
			MethodName: "MacthVehicleForTrip",
			Handler:    _VehicleService_MacthVehicleForTrip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vehicle.proto",
}
