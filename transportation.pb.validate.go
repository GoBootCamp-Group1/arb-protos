// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transportation.proto

package arb_protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BlockTransportationsByOwnerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BlockTransportationsByOwnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockTransportationsByOwnerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BlockTransportationsByOwnerRequestMultiError, or nil if none found.
func (m *BlockTransportationsByOwnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockTransportationsByOwnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return BlockTransportationsByOwnerRequestMultiError(errors)
	}

	return nil
}

// BlockTransportationsByOwnerRequestMultiError is an error wrapping multiple
// validation errors returned by
// BlockTransportationsByOwnerRequest.ValidateAll() if the designated
// constraints aren't met.
type BlockTransportationsByOwnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockTransportationsByOwnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockTransportationsByOwnerRequestMultiError) AllErrors() []error { return m }

// BlockTransportationsByOwnerRequestValidationError is the validation error
// returned by BlockTransportationsByOwnerRequest.Validate if the designated
// constraints aren't met.
type BlockTransportationsByOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockTransportationsByOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockTransportationsByOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockTransportationsByOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockTransportationsByOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockTransportationsByOwnerRequestValidationError) ErrorName() string {
	return "BlockTransportationsByOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlockTransportationsByOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockTransportationsByOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockTransportationsByOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockTransportationsByOwnerRequestValidationError{}

// Validate checks the field values on BlockTransportationsByOwnerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BlockTransportationsByOwnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockTransportationsByOwnerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BlockTransportationsByOwnerResponseMultiError, or nil if none found.
func (m *BlockTransportationsByOwnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockTransportationsByOwnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return BlockTransportationsByOwnerResponseMultiError(errors)
	}

	return nil
}

// BlockTransportationsByOwnerResponseMultiError is an error wrapping multiple
// validation errors returned by
// BlockTransportationsByOwnerResponse.ValidateAll() if the designated
// constraints aren't met.
type BlockTransportationsByOwnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockTransportationsByOwnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockTransportationsByOwnerResponseMultiError) AllErrors() []error { return m }

// BlockTransportationsByOwnerResponseValidationError is the validation error
// returned by BlockTransportationsByOwnerResponse.Validate if the designated
// constraints aren't met.
type BlockTransportationsByOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockTransportationsByOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockTransportationsByOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockTransportationsByOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockTransportationsByOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockTransportationsByOwnerResponseValidationError) ErrorName() string {
	return "BlockTransportationsByOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BlockTransportationsByOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockTransportationsByOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockTransportationsByOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockTransportationsByOwnerResponseValidationError{}

// Validate checks the field values on BlockTransportationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockTransportationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockTransportationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockTransportationsRequestMultiError, or nil if none found.
func (m *BlockTransportationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockTransportationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportationId

	if len(errors) > 0 {
		return BlockTransportationsRequestMultiError(errors)
	}

	return nil
}

// BlockTransportationsRequestMultiError is an error wrapping multiple
// validation errors returned by BlockTransportationsRequest.ValidateAll() if
// the designated constraints aren't met.
type BlockTransportationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockTransportationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockTransportationsRequestMultiError) AllErrors() []error { return m }

// BlockTransportationsRequestValidationError is the validation error returned
// by BlockTransportationsRequest.Validate if the designated constraints
// aren't met.
type BlockTransportationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockTransportationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockTransportationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockTransportationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockTransportationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockTransportationsRequestValidationError) ErrorName() string {
	return "BlockTransportationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlockTransportationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockTransportationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockTransportationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockTransportationsRequestValidationError{}

// Validate checks the field values on BlockTransportationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockTransportationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockTransportationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockTransportationsResponseMultiError, or nil if none found.
func (m *BlockTransportationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockTransportationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return BlockTransportationsResponseMultiError(errors)
	}

	return nil
}

// BlockTransportationsResponseMultiError is an error wrapping multiple
// validation errors returned by BlockTransportationsResponse.ValidateAll() if
// the designated constraints aren't met.
type BlockTransportationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockTransportationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockTransportationsResponseMultiError) AllErrors() []error { return m }

// BlockTransportationsResponseValidationError is the validation error returned
// by BlockTransportationsResponse.Validate if the designated constraints
// aren't met.
type BlockTransportationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockTransportationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockTransportationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockTransportationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockTransportationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockTransportationsResponseValidationError) ErrorName() string {
	return "BlockTransportationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BlockTransportationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockTransportationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockTransportationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockTransportationsResponseValidationError{}

// Validate checks the field values on UnBlockTransportationsByOwnerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnBlockTransportationsByOwnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockTransportationsByOwnerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnBlockTransportationsByOwnerRequestMultiError, or nil if none found.
func (m *UnBlockTransportationsByOwnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockTransportationsByOwnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return UnBlockTransportationsByOwnerRequestMultiError(errors)
	}

	return nil
}

// UnBlockTransportationsByOwnerRequestMultiError is an error wrapping multiple
// validation errors returned by
// UnBlockTransportationsByOwnerRequest.ValidateAll() if the designated
// constraints aren't met.
type UnBlockTransportationsByOwnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockTransportationsByOwnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockTransportationsByOwnerRequestMultiError) AllErrors() []error { return m }

// UnBlockTransportationsByOwnerRequestValidationError is the validation error
// returned by UnBlockTransportationsByOwnerRequest.Validate if the designated
// constraints aren't met.
type UnBlockTransportationsByOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockTransportationsByOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockTransportationsByOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockTransportationsByOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockTransportationsByOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockTransportationsByOwnerRequestValidationError) ErrorName() string {
	return "UnBlockTransportationsByOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockTransportationsByOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockTransportationsByOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockTransportationsByOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockTransportationsByOwnerRequestValidationError{}

// Validate checks the field values on UnBlockTransportationsByOwnerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnBlockTransportationsByOwnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockTransportationsByOwnerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnBlockTransportationsByOwnerResponseMultiError, or nil if none found.
func (m *UnBlockTransportationsByOwnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockTransportationsByOwnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UnBlockTransportationsByOwnerResponseMultiError(errors)
	}

	return nil
}

// UnBlockTransportationsByOwnerResponseMultiError is an error wrapping
// multiple validation errors returned by
// UnBlockTransportationsByOwnerResponse.ValidateAll() if the designated
// constraints aren't met.
type UnBlockTransportationsByOwnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockTransportationsByOwnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockTransportationsByOwnerResponseMultiError) AllErrors() []error { return m }

// UnBlockTransportationsByOwnerResponseValidationError is the validation error
// returned by UnBlockTransportationsByOwnerResponse.Validate if the
// designated constraints aren't met.
type UnBlockTransportationsByOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockTransportationsByOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockTransportationsByOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockTransportationsByOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockTransportationsByOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockTransportationsByOwnerResponseValidationError) ErrorName() string {
	return "UnBlockTransportationsByOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockTransportationsByOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockTransportationsByOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockTransportationsByOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockTransportationsByOwnerResponseValidationError{}

// Validate checks the field values on UnBlockTransportationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnBlockTransportationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockTransportationsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnBlockTransportationsRequestMultiError, or nil if none found.
func (m *UnBlockTransportationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockTransportationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportationId

	if len(errors) > 0 {
		return UnBlockTransportationsRequestMultiError(errors)
	}

	return nil
}

// UnBlockTransportationsRequestMultiError is an error wrapping multiple
// validation errors returned by UnBlockTransportationsRequest.ValidateAll()
// if the designated constraints aren't met.
type UnBlockTransportationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockTransportationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockTransportationsRequestMultiError) AllErrors() []error { return m }

// UnBlockTransportationsRequestValidationError is the validation error
// returned by UnBlockTransportationsRequest.Validate if the designated
// constraints aren't met.
type UnBlockTransportationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockTransportationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockTransportationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockTransportationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockTransportationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockTransportationsRequestValidationError) ErrorName() string {
	return "UnBlockTransportationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockTransportationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockTransportationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockTransportationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockTransportationsRequestValidationError{}

// Validate checks the field values on UnBlockTransportationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnBlockTransportationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnBlockTransportationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnBlockTransportationsResponseMultiError, or nil if none found.
func (m *UnBlockTransportationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnBlockTransportationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UnBlockTransportationsResponseMultiError(errors)
	}

	return nil
}

// UnBlockTransportationsResponseMultiError is an error wrapping multiple
// validation errors returned by UnBlockTransportationsResponse.ValidateAll()
// if the designated constraints aren't met.
type UnBlockTransportationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnBlockTransportationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnBlockTransportationsResponseMultiError) AllErrors() []error { return m }

// UnBlockTransportationsResponseValidationError is the validation error
// returned by UnBlockTransportationsResponse.Validate if the designated
// constraints aren't met.
type UnBlockTransportationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockTransportationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockTransportationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockTransportationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockTransportationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockTransportationsResponseValidationError) ErrorName() string {
	return "UnBlockTransportationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnBlockTransportationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockTransportationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockTransportationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockTransportationsResponseValidationError{}

// Validate checks the field values on CreateTransportationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransportationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransportationRequestMultiError, or nil if none found.
func (m *CreateTransportationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	// no validation rules for Name

	// no validation rules for WalletBalance

	if len(errors) > 0 {
		return CreateTransportationRequestMultiError(errors)
	}

	return nil
}

// CreateTransportationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTransportationRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateTransportationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportationRequestMultiError) AllErrors() []error { return m }

// CreateTransportationRequestValidationError is the validation error returned
// by CreateTransportationRequest.Validate if the designated constraints
// aren't met.
type CreateTransportationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportationRequestValidationError) ErrorName() string {
	return "CreateTransportationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportationRequestValidationError{}

// Validate checks the field values on CreateTransportationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransportationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransportationResponseMultiError, or nil if none found.
func (m *CreateTransportationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateTransportationResponseMultiError(errors)
	}

	return nil
}

// CreateTransportationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateTransportationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateTransportationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportationResponseMultiError) AllErrors() []error { return m }

// CreateTransportationResponseValidationError is the validation error returned
// by CreateTransportationResponse.Validate if the designated constraints
// aren't met.
type CreateTransportationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportationResponseValidationError) ErrorName() string {
	return "CreateTransportationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportationResponseValidationError{}

// Validate checks the field values on GetTransportationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportationRequestMultiError, or nil if none found.
func (m *GetTransportationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTransportationRequestMultiError(errors)
	}

	return nil
}

// GetTransportationRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransportationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransportationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportationRequestMultiError) AllErrors() []error { return m }

// GetTransportationRequestValidationError is the validation error returned by
// GetTransportationRequest.Validate if the designated constraints aren't met.
type GetTransportationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportationRequestValidationError) ErrorName() string {
	return "GetTransportationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportationRequestValidationError{}

// Validate checks the field values on GetTransportationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportationResponseMultiError, or nil if none found.
func (m *GetTransportationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OwnerId

	// no validation rules for Name

	// no validation rules for WalletBalance

	if len(errors) > 0 {
		return GetTransportationResponseMultiError(errors)
	}

	return nil
}

// GetTransportationResponseMultiError is an error wrapping multiple validation
// errors returned by GetTransportationResponse.ValidateAll() if the
// designated constraints aren't met.
type GetTransportationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportationResponseMultiError) AllErrors() []error { return m }

// GetTransportationResponseValidationError is the validation error returned by
// GetTransportationResponse.Validate if the designated constraints aren't met.
type GetTransportationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportationResponseValidationError) ErrorName() string {
	return "GetTransportationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportationResponseValidationError{}

// Validate checks the field values on UpdateTransportationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTransportationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTransportationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTransportationRequestMultiError, or nil if none found.
func (m *UpdateTransportationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransportationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OwnerId

	// no validation rules for Name

	// no validation rules for WalletBalance

	if len(errors) > 0 {
		return UpdateTransportationRequestMultiError(errors)
	}

	return nil
}

// UpdateTransportationRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTransportationRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateTransportationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransportationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransportationRequestMultiError) AllErrors() []error { return m }

// UpdateTransportationRequestValidationError is the validation error returned
// by UpdateTransportationRequest.Validate if the designated constraints
// aren't met.
type UpdateTransportationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransportationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransportationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransportationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransportationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransportationRequestValidationError) ErrorName() string {
	return "UpdateTransportationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransportationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransportationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransportationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransportationRequestValidationError{}

// Validate checks the field values on UpdateTransportationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTransportationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTransportationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTransportationResponseMultiError, or nil if none found.
func (m *UpdateTransportationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransportationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateTransportationResponseMultiError(errors)
	}

	return nil
}

// UpdateTransportationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateTransportationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateTransportationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransportationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransportationResponseMultiError) AllErrors() []error { return m }

// UpdateTransportationResponseValidationError is the validation error returned
// by UpdateTransportationResponse.Validate if the designated constraints
// aren't met.
type UpdateTransportationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransportationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransportationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransportationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransportationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransportationResponseValidationError) ErrorName() string {
	return "UpdateTransportationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransportationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransportationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransportationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransportationResponseValidationError{}

// Validate checks the field values on DeleteTransportationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTransportationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTransportationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTransportationRequestMultiError, or nil if none found.
func (m *DeleteTransportationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTransportationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTransportationRequestMultiError(errors)
	}

	return nil
}

// DeleteTransportationRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteTransportationRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteTransportationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTransportationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTransportationRequestMultiError) AllErrors() []error { return m }

// DeleteTransportationRequestValidationError is the validation error returned
// by DeleteTransportationRequest.Validate if the designated constraints
// aren't met.
type DeleteTransportationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTransportationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTransportationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTransportationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTransportationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTransportationRequestValidationError) ErrorName() string {
	return "DeleteTransportationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTransportationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTransportationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTransportationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTransportationRequestValidationError{}

// Validate checks the field values on DeleteTransportationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTransportationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTransportationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTransportationResponseMultiError, or nil if none found.
func (m *DeleteTransportationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTransportationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteTransportationResponseMultiError(errors)
	}

	return nil
}

// DeleteTransportationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteTransportationResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteTransportationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTransportationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTransportationResponseMultiError) AllErrors() []error { return m }

// DeleteTransportationResponseValidationError is the validation error returned
// by DeleteTransportationResponse.Validate if the designated constraints
// aren't met.
type DeleteTransportationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTransportationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTransportationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTransportationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTransportationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTransportationResponseValidationError) ErrorName() string {
	return "DeleteTransportationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTransportationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTransportationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTransportationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTransportationResponseValidationError{}

// Validate checks the field values on ListTransportationCompaniesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTransportationCompaniesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransportationCompaniesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTransportationCompaniesRequestMultiError, or nil if none found.
func (m *ListTransportationCompaniesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransportationCompaniesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTransportationCompaniesRequestMultiError(errors)
	}

	return nil
}

// ListTransportationCompaniesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListTransportationCompaniesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransportationCompaniesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransportationCompaniesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransportationCompaniesRequestMultiError) AllErrors() []error { return m }

// ListTransportationCompaniesRequestValidationError is the validation error
// returned by ListTransportationCompaniesRequest.Validate if the designated
// constraints aren't met.
type ListTransportationCompaniesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransportationCompaniesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransportationCompaniesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransportationCompaniesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransportationCompaniesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransportationCompaniesRequestValidationError) ErrorName() string {
	return "ListTransportationCompaniesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransportationCompaniesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransportationCompaniesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransportationCompaniesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransportationCompaniesRequestValidationError{}

// Validate checks the field values on ListTransportationCompaniesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTransportationCompaniesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransportationCompaniesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTransportationCompaniesResponseMultiError, or nil if none found.
func (m *ListTransportationCompaniesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransportationCompaniesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCompanies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTransportationCompaniesResponseValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTransportationCompaniesResponseValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransportationCompaniesResponseValidationError{
					field:  fmt.Sprintf("Companies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTransportationCompaniesResponseMultiError(errors)
	}

	return nil
}

// ListTransportationCompaniesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListTransportationCompaniesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTransportationCompaniesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransportationCompaniesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransportationCompaniesResponseMultiError) AllErrors() []error { return m }

// ListTransportationCompaniesResponseValidationError is the validation error
// returned by ListTransportationCompaniesResponse.Validate if the designated
// constraints aren't met.
type ListTransportationCompaniesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransportationCompaniesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransportationCompaniesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransportationCompaniesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransportationCompaniesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransportationCompaniesResponseValidationError) ErrorName() string {
	return "ListTransportationCompaniesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransportationCompaniesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransportationCompaniesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransportationCompaniesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransportationCompaniesResponseValidationError{}

// Validate checks the field values on ListTransportationsByOwnerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTransportationsByOwnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransportationsByOwnerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTransportationsByOwnerRequestMultiError, or nil if none found.
func (m *ListTransportationsByOwnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransportationsByOwnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return ListTransportationsByOwnerRequestMultiError(errors)
	}

	return nil
}

// ListTransportationsByOwnerRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListTransportationsByOwnerRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransportationsByOwnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransportationsByOwnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransportationsByOwnerRequestMultiError) AllErrors() []error { return m }

// ListTransportationsByOwnerRequestValidationError is the validation error
// returned by ListTransportationsByOwnerRequest.Validate if the designated
// constraints aren't met.
type ListTransportationsByOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransportationsByOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransportationsByOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransportationsByOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransportationsByOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransportationsByOwnerRequestValidationError) ErrorName() string {
	return "ListTransportationsByOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransportationsByOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransportationsByOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransportationsByOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransportationsByOwnerRequestValidationError{}

// Validate checks the field values on ListTransportationsByOwnerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTransportationsByOwnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransportationsByOwnerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTransportationsByOwnerResponseMultiError, or nil if none found.
func (m *ListTransportationsByOwnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransportationsByOwnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCompanies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTransportationsByOwnerResponseValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTransportationsByOwnerResponseValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransportationsByOwnerResponseValidationError{
					field:  fmt.Sprintf("Companies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTransportationsByOwnerResponseMultiError(errors)
	}

	return nil
}

// ListTransportationsByOwnerResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListTransportationsByOwnerResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTransportationsByOwnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransportationsByOwnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransportationsByOwnerResponseMultiError) AllErrors() []error { return m }

// ListTransportationsByOwnerResponseValidationError is the validation error
// returned by ListTransportationsByOwnerResponse.Validate if the designated
// constraints aren't met.
type ListTransportationsByOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransportationsByOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransportationsByOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransportationsByOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransportationsByOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransportationsByOwnerResponseValidationError) ErrorName() string {
	return "ListTransportationsByOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransportationsByOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransportationsByOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransportationsByOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransportationsByOwnerResponseValidationError{}

// Validate checks the field values on TransportationCompany with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransportationCompany) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportationCompany with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransportationCompanyMultiError, or nil if none found.
func (m *TransportationCompany) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportationCompany) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OwnerId

	// no validation rules for Name

	// no validation rules for WalletBalance

	if len(errors) > 0 {
		return TransportationCompanyMultiError(errors)
	}

	return nil
}

// TransportationCompanyMultiError is an error wrapping multiple validation
// errors returned by TransportationCompany.ValidateAll() if the designated
// constraints aren't met.
type TransportationCompanyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportationCompanyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportationCompanyMultiError) AllErrors() []error { return m }

// TransportationCompanyValidationError is the validation error returned by
// TransportationCompany.Validate if the designated constraints aren't met.
type TransportationCompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportationCompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportationCompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportationCompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportationCompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportationCompanyValidationError) ErrorName() string {
	return "TransportationCompanyValidationError"
}

// Error satisfies the builtin error interface
func (e TransportationCompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportationCompany.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportationCompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportationCompanyValidationError{}
